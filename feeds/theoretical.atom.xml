<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Personal</title><link href="http://web-pages.github.io/notes/" rel="alternate"></link><link href="http://web-pages.github.io/notes/feeds/theoretical.atom.xml" rel="self"></link><id>http://web-pages.github.io/notes/</id><updated>2016-02-03T00:00:00-08:00</updated><entry><title>Big O Notation</title><link href="http://web-pages.github.io/notes/theoretical/big-o-notation.html" rel="alternate"></link><updated>2016-02-03T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-03:notes/theoretical/big-o-notation.html</id><summary type="html">&lt;p&gt;&lt;/p&gt;&lt;div class="videobox"&gt;
                &lt;iframe src="https://www.youtube.com/embed/eNsKNfFUqFo" height="390" mozallowfullscreen="" width="640" frameborder="0" allowfullscreen="" webkitallowfullscreen=""&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Big O notation concerns functions &lt;strong&gt;defined on the positive integers&lt;/strong&gt;:
&lt;/p&gt;
&lt;div class="math"&gt;$$
T(n) = \text{function on }n=1,2,3,\ldots
$$&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;English Definition&lt;/p&gt;
&lt;p&gt;A function &lt;span class="math"&gt;\(T(n)\)&lt;/span&gt; is said to be &lt;em&gt;big O&lt;/em&gt; of &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt; if eventually,
(&lt;em&gt;for all sufficiently large values of &lt;span class="math"&gt;\(n\)&lt;/span&gt;&lt;/em&gt;), &lt;span class="math"&gt;\(T(n)\)&lt;/span&gt; is bounded above
by a &lt;em&gt;constant multiple&lt;/em&gt; of &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="mathematical-definition"&gt;Mathematical Definition&lt;a href="#mathematical-definition" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
T(n) = O(f(n)) \iff \exists \text{ constants } c, n_0 \text { s.t. } T(n) \leq c\cdot f(n)\hspace{2mm} \forall n \geq n_0
$$&lt;/div&gt;
&lt;h1 id="orders-of-common-functions"&gt;Orders Of Common functions&lt;a href="#orders-of-common-functions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This taken from the &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions"&gt;wikipedia article&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;
about Big O.&lt;/p&gt;
&lt;p&gt;The following list is in ascending order of growth:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(1)\)&lt;/span&gt; - &lt;strong&gt;constant&lt;/strong&gt; - array lookup by index&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(\log\log n)\)&lt;/span&gt; - &lt;strong&gt;double logarithmic&lt;/strong&gt; - interpolation search&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(\log n)\)&lt;/span&gt; - logarithm - &lt;a href="../binary-search.html"&gt;Binary Search&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="examples"&gt;Examples&lt;a href="#examples" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions&lt;/li&gt;&lt;li&gt;../binary-search.html&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary></entry><entry><title>Imperative Vs Declarative</title><link href="http://web-pages.github.io/notes/theoretical/imperative-vs-declarative.html" rel="alternate"></link><updated>2015-04-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-05:notes/theoretical/imperative-vs-declarative.html</id><summary type="html">&lt;h1 id="definitions"&gt;Definitions&lt;a href="#definitions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="imperative"&gt;Imperative&lt;a href="#imperative" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Imperative programming&lt;/em&gt;: tells the “machine” how to do something, 
and as a result what you want to happen will happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imperative programming is a paradigm that &lt;span class="pelican-inline"&gt;describes computation in terms
of statements that change a program state&lt;/span&gt;. In much the same way that the
&lt;a href="http://en.wikipedia.org/wiki/Imperative_mood"&gt;imperative mood&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; in natural
languages&lt;sup id="sf-imperative-vs-declarative-1-back"&gt;&lt;a href="#sf-imperative-vs-declarative-1" title="A natural language (or ordinary language) is any language which arises, unpremeditated, in the brains of human beings. These are the  languages humans use to communicate. They are distinguished from constructed  and formal languages such as those used to program computers or to study logic" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; expresses commands to take action, imperative programs define
sequences of commands for the computer to perform. &lt;span class="pelican-inline"&gt; In general, Imperative
programming is focused on describing &lt;strong&gt;how&lt;/strong&gt; a program operates&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="procedural-programming"&gt;Procedural Programming&lt;a href="#procedural-programming" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A procedural paradigm means a program is built from one or more procedures
(also known as subroutines or functions). The idea is that state changes are
localized to procedures or restricted to explicit arguments and returns from
procedures (this is known as [structured programming](http://en.wikipedia.org/wiki/Structured_programming.
Structured programming is normally promoted to improve the maintainability
and overall quality of imperative programs.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;Object Oriented Programming&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;
is just an extension of the structured pogramming paradigm.&lt;/p&gt;
&lt;h3 id="disadvantages-of-imperative-programming"&gt;Disadvantages Of Imperative Programming&lt;a href="#disadvantages-of-imperative-programming" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="declarative"&gt;Declarative&lt;a href="#declarative" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Declarative programming&lt;/em&gt;: tells the “machine” what you would like 
to happen, and lets the machine figure out how to do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Declarative programs are often described as a program that is not imperative,
although a number of common definitions do exist:&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Declarative Programming Definitions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A program that describes what computation should be performed and not how to compute it&lt;/li&gt;
&lt;li&gt;Any programming language that lacks &lt;a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt; (or more specifically, is &lt;a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)"&gt;referentially transparent&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;A language with a clear correspondence to mathematical logic.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="programming-examples"&gt;Programming Examples&lt;a href="#programming-examples" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://latentflip.com/imperative-vs-declarative/"&gt;Imperative Vs Declarative&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt; - Blog post with some nice examples&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Imperative_mood&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Object-oriented_programming&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Side_effect_(computer_science)&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)&lt;/li&gt;&lt;li&gt;http://latentflip.com/imperative-vs-declarative/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-imperative-vs-declarative-1"&gt;A natural language (or ordinary language) is any language
which arises, unpremeditated, in the brains of human beings. These are the 
languages humans use to communicate. They are distinguished from constructed 
and formal languages such as those used to program computers or to study
logic &lt;a href="#sf-imperative-vs-declarative-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="compiler"></category><category term="computer science"></category></entry><entry><title>Machine Learning Week 1</title><link href="http://web-pages.github.io/notes/theoretical/machine-learning-week-1.html" rel="alternate"></link><updated>2015-04-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-05:notes/theoretical/machine-learning-week-1.html</id><summary type="html">&lt;h1 id="week-1"&gt;Week 1&lt;a class="headerlink" href="#week-1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are several types of machine learning algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unsupervised&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reinforcement Learning&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommender Systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="supervised-learning-introduction"&gt;Supervised Learning Introduction&lt;a class="headerlink" href="#supervised-learning-introduction" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Two common supervised learning outcomes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regression - predict a real number output&lt;/li&gt;
&lt;li&gt;Classification - a discrete valued prediction&lt;/li&gt;
&lt;/ol&gt;</summary><category term="machine learning"></category><category term="computer science"></category></entry></feed>