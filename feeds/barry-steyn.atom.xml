<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Personal</title><link href="http://web-pages.github.io/notes/" rel="alternate"></link><link href="http://web-pages.github.io/notes/feeds/barry-steyn.atom.xml" rel="self"></link><id>http://web-pages.github.io/notes/</id><updated>2016-02-26T00:00:00-08:00</updated><entry><title>Climbing Stairs</title><link href="http://web-pages.github.io/notes/climbing-stairs.html" rel="alternate"></link><updated>2016-02-26T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-26:notes/climbing-stairs.html</id><summary type="html">
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a class="headerlink" href="#problem-statement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You are climbing a stair case. It takes &lt;span class="math"&gt;\(n\)&lt;/span&gt; steps to reach to the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?&lt;/p&gt;
&lt;h1 id="solution"&gt;Solution&lt;a class="headerlink" href="#solution" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Assume &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt; is a function that represents the solution. Then the following
recursive relationship holds:&lt;/p&gt;
&lt;div class="math"&gt;$$
f(n) =
\begin{cases}
n &amp;amp; \text{when }n \leq 2 \\
f(n-1) + f(n-2) &amp;amp; n &amp;gt; 2
\end{cases}
$$&lt;/div&gt;
&lt;p&gt;This can be done purely recursively, but that is not efficient. Why? Because we
will be recalculating for which we have already calculated. But we can use
a dynamic programming trick: Memoization.&lt;/p&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;a class="headerlink" href="#analysis" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assume there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; stairs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;Code&lt;a class="headerlink" href="#code" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;climbStairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;twos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;twos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;twos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="dynamic programming"></category><category term="recursion"></category><category term="memoization"></category></entry><entry><title>Find Two Values That Add To A Target In A Binary Tree</title><link href="http://web-pages.github.io/notes/find-two-values-that-add-to-a-target-in-a-binary-tree.html" rel="alternate"></link><updated>2016-02-26T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-26:notes/find-two-values-that-add-to-a-target-in-a-binary-tree.html</id><summary type="html">
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a class="headerlink" href="#problem-statement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Given a binary tree and a target value, find if there are two values that add
up to the target.&lt;/p&gt;
&lt;h1 id="solutions"&gt;Solutions&lt;a class="headerlink" href="#solutions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Assume that there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; nodes in the tree.&lt;/p&gt;
&lt;h2 id="no-extra-space"&gt;No Extra Space&lt;a class="headerlink" href="#no-extra-space" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If this is to be accomplished without using any extra space, then the solution
would be quadratic. This is because the binary tree must be traversed, and each
value in the tree would launch another search for a corresponding value that
adds to the target.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-a-hash-table"&gt;Use A Hash Table&lt;a class="headerlink" href="#use-a-hash-table" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each node of the binary tree would be examined. Assuming the node has value
&lt;span class="math"&gt;\(x\)&lt;/span&gt;, we would then search for the value &lt;span class="math"&gt;\(target-x\)&lt;/span&gt; in the hash table. If this
value is not present, then insert the current node into the hash table and continue
the traversal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code"&gt;Code&lt;a class="headerlink" href="#code" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;findValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;findValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;findValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="binary search tree"></category><category term="binary tree"></category><category term="tree"></category><category term="graph"></category><category term="algorithms"></category></entry><entry><title>Number Of Targets In A Sorted Array</title><link href="http://web-pages.github.io/notes/number-of-targets-in-a-sorted-array.html" rel="alternate"></link><updated>2016-02-26T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-26:notes/number-of-targets-in-a-sorted-array.html</id><summary type="html">
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a class="headerlink" href="#problem-statement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Given a sorted array with numbers that can be potentially repeated, find the
number of occurrences of a target.&lt;/p&gt;
&lt;h1 id="solutions"&gt;Solutions&lt;a class="headerlink" href="#solutions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="linear-search"&gt;Linear Search&lt;a class="headerlink" href="#linear-search" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The easiest way to perform accomplish this task is to keep track of the target
while iterating over the array. Assuming the array has &lt;span class="math"&gt;\(n\)&lt;/span&gt; elements, linear
search has the following analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="binary-search"&gt;Binary search&lt;a class="headerlink" href="#binary-search" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The question did mention that the input array is sorted. Due to this fact,
binary search can be used. Using binary search, we would find the first index
array that is &lt;em&gt;strictly greater&lt;/em&gt; than the target, and then perform another binary search
that will find the first index that is &lt;em&gt;greater than or equal&lt;/em&gt; to the target.
Subtracting the two resulting indexes will give us the answer.&lt;/p&gt;
&lt;p&gt;This makes the solution more efficient. Again, assume the array has &lt;span class="math"&gt;\(n\)&lt;/span&gt; elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(\log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;Code&lt;a class="headerlink" href="#code" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sortedNumbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// assume this is global&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;binarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;strictlyGreater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sortedNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strictlyGreater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;findOccurrences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;binarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="binary search"></category></entry><entry><title>The Maximum Depth Of A Binary Tree</title><link href="http://web-pages.github.io/notes/the-maximum-depth-of-a-binary-tree.html" rel="alternate"></link><updated>2016-02-26T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-26:notes/the-maximum-depth-of-a-binary-tree.html</id><summary type="html">
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a class="headerlink" href="#problem-statement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Given a binary tree, find it's maximum depth?&lt;/p&gt;
&lt;h1 id="solution"&gt;Solution&lt;a class="headerlink" href="#solution" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Recursively traverse the binary tree, keeping track of the depth of the depth
of each of it's children. Return the maximum of the two children to the parent
(and don't forget to add 1 which represents the depth of the child to the parent).&lt;/p&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;a class="headerlink" href="#analysis" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assume that the binary tree has &lt;span class="math"&gt;\(n\)&lt;/span&gt; nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;Code&lt;a class="headerlink" href="#code" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxDepth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;maxDepth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;maxDepth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="binary search tree"></category><category term="binary tree"></category><category term="tree"></category><category term="graph"></category><category term="algorithms"></category></entry><entry><title>Big O Notation</title><link href="http://web-pages.github.io/notes/big-o-notation.html" rel="alternate"></link><updated>2016-02-03T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-02-03:notes/big-o-notation.html</id><summary type="html">&lt;p&gt;&lt;/p&gt;&lt;div class="videobox"&gt;
                &lt;iframe src="https://www.youtube.com/embed/eNsKNfFUqFo" height="390" mozallowfullscreen="" width="640" frameborder="0" allowfullscreen="" webkitallowfullscreen=""&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Big O notation concerns functions &lt;strong&gt;defined on the positive integers&lt;/strong&gt;:
&lt;/p&gt;
&lt;div class="math"&gt;$$
T(n) = \text{function on }n=1,2,3,\ldots
$$&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;English Definition&lt;/p&gt;
&lt;p&gt;A function &lt;span class="math"&gt;\(T(n)\)&lt;/span&gt; is said to be &lt;em&gt;big O&lt;/em&gt; of &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt; if eventually,
(&lt;em&gt;for all sufficiently large values of &lt;span class="math"&gt;\(n\)&lt;/span&gt;&lt;/em&gt;), &lt;span class="math"&gt;\(T(n)\)&lt;/span&gt; is bounded above
by a &lt;em&gt;constant multiple&lt;/em&gt; of &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="mathematical-definition"&gt;Mathematical Definition&lt;a href="#mathematical-definition" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
T(n) = O(f(n)) \iff \exists \text{ constants } c, n_0 \text { s.t. } T(n) \leq c\cdot f(n)\hspace{2mm} \forall n \geq n_0
$$&lt;/div&gt;
&lt;h1 id="orders-of-common-functions"&gt;Orders Of Common functions&lt;a href="#orders-of-common-functions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This taken from the &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions"&gt;wikipedia article&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;
about Big O.&lt;/p&gt;
&lt;p&gt;The following list is in ascending order of growth:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(1)\)&lt;/span&gt; - &lt;strong&gt;constant&lt;/strong&gt; - array lookup by index&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(\log\log n)\)&lt;/span&gt; - &lt;strong&gt;double logarithmic&lt;/strong&gt; - interpolation search&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(O(\log n)\)&lt;/span&gt; - logarithm - &lt;a href="../binary-search.html"&gt;Binary Search&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="examples"&gt;Examples&lt;a href="#examples" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions&lt;/li&gt;&lt;li&gt;../binary-search.html&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary></entry><entry><title>Paint Houses</title><link href="http://web-pages.github.io/notes/paint-houses.html" rel="alternate"></link><updated>2016-01-30T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-01-30:notes/paint-houses.html</id><summary type="html">
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a class="headerlink" href="#problem-statement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are a row of &lt;code&gt;n&lt;/code&gt; houses, each house can be painted with one of the three
colors: &lt;strong&gt;red, blue or green&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cost of painting each house with a certain color is different. You have to
paint all the houses such that no two adjacent houses have the same color.
The cost of painting each house with a certain color is represented by a &lt;code&gt;n x 3&lt;/code&gt;
cost matrix. For example, &lt;code&gt;costs[0][0]&lt;/code&gt; is the cost of painting &lt;code&gt;house 0&lt;/code&gt; with
color &lt;em&gt;red&lt;/em&gt;; &lt;code&gt;costs[1][2]&lt;/code&gt; is the cost of painting &lt;code&gt;house 1&lt;/code&gt; with color green,
and so on...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find the minimum cost to paint all houses.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="clarifying-questions"&gt;Clarifying questions&lt;a class="headerlink" href="#clarifying-questions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Q: Are all costs positive integers?&lt;br&gt; &lt;em&gt;A: Yes&lt;/em&gt;.&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="solututions"&gt;Solututions&lt;a class="headerlink" href="#solututions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;All solutions assume a &lt;span class="math"&gt;\(n\times m\)&lt;/span&gt; matrix.&lt;/p&gt;
&lt;h2 id="recursion"&gt;Recursion&lt;a class="headerlink" href="#recursion" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="dynamic-programming"&gt;Dynamic Programming&lt;a class="headerlink" href="#dynamic-programming" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="explanation"&gt;Explanation&lt;a class="headerlink" href="#explanation" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Put the dynamic programming equation here&lt;/p&gt;
&lt;h3 id="code"&gt;Code&lt;a class="headerlink" href="#code" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;minCost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;housePaintCosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="coding puzzle"></category><category term="leetcode"></category><category term="memoization"></category><category term="dynamic-programming"></category></entry><entry><title>Scalability Overview</title><link href="http://web-pages.github.io/notes/scalability-overview.html" rel="alternate"></link><updated>2016-01-27T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2016-01-27:notes/scalability-overview.html</id><summary type="html">
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/-W9F__D3oY4" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="Scalability"></category></entry><entry><title>Gym Workout</title><link href="http://web-pages.github.io/notes/gym-workout.html" rel="alternate"></link><updated>2015-09-02T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-09-02:notes/gym-workout.html</id><summary type="html">
&lt;h1 id="weeks-1-to-3"&gt;Weeks 1 to 3&lt;a class="headerlink" href="#weeks-1-to-3" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="day-1"&gt;Day 1&lt;a class="headerlink" href="#day-1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Squats&lt;/strong&gt; 5x15,12,10,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bent Over Rows&lt;/strong&gt; 5x12,10,8,6,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bench Press&lt;/strong&gt; 5x15,12,10,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overhead Press&lt;/strong&gt; 5x12,10,8,6,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Rotations&lt;/strong&gt; 3x12*&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seated Calf Raises&lt;/strong&gt; 3x15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mountain Climbers&lt;/strong&gt; 3x30 seconds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planks&lt;/strong&gt; 3x30 seconds&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="day-2"&gt;Day 2&lt;a class="headerlink" href="#day-2" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Deadlift&lt;/strong&gt; 5x15,12,10,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kneeling Landmine Press&lt;/strong&gt; 5x15,12,10,8,8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alt. Arnold Press&lt;/strong&gt; 5x12,10,8,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alt. Front Lunge&lt;/strong&gt; 5x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dumbbell Pullovers&lt;/strong&gt; 3x15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weighted Crunches&lt;/strong&gt; 3x15 (feet on wall)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Side Planks&lt;/strong&gt; 3x30 seconds&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="day-3"&gt;Day 3&lt;a class="headerlink" href="#day-3" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Front Squat&lt;/strong&gt; 5x15,12,10,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T-Bar Row&lt;/strong&gt; 5x12,10,8,8,6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dips&lt;/strong&gt; 5x15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upright Row&lt;/strong&gt; 5x15,12,10,8,8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Glute Bridges&lt;/strong&gt; (weighted) 3x10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standing Calf Raises&lt;/strong&gt; 3x15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Russian Twists&lt;/strong&gt; 3x30 (15 each side)&lt;/li&gt;
&lt;/ol&gt;</summary><category term="exercise"></category><category term="health"></category><category term="primal"></category></entry><entry><title>Maximal Square</title><link href="http://web-pages.github.io/notes/maximal-square.html" rel="alternate"></link><updated>2015-07-06T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-07-06:notes/maximal-square.html</id><summary type="html">&lt;p&gt;This is a &lt;a href="https://leetcode.com/problems/maximal-square/"&gt;LeetCode problem&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a href="#problem-statement" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.&lt;/p&gt;
&lt;p&gt;For example, given the following matrix:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Return 4.&lt;/p&gt;
&lt;h3 id="clarifying-questions"&gt;Clarifying questions&lt;a href="#clarifying-questions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Q: How is the median calculated when there are an even amount of elements?&lt;br&gt; &lt;em&gt;A: It is the average of the two middle elements&lt;/em&gt;.&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="solututions"&gt;Solututions&lt;a href="#solututions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;All solutions assume a &lt;span class="math"&gt;\(n\times m\)&lt;/span&gt; matrix.&lt;/p&gt;
&lt;h2 id="dynamic-programming"&gt;Dynamic Programming&lt;a href="#dynamic-programming" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n\cdot m)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(n\cdot m)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is to dynamic programming... Mention Kadane algorithm (link to it)&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;a href="#code" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maximalSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;maxSquare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])));&lt;/span&gt;

        &lt;span class="n"&gt;maxSquare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxSquare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maxSquare&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://leetcode.com/problems/maximal-square/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="coding puzzle"></category><category term="leetcode"></category><category term="memoization"></category><category term="dynamic-programming"></category></entry><entry><title>Python Setup</title><link href="http://web-pages.github.io/notes/python-setup.html" rel="alternate"></link><updated>2015-07-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-07-05:notes/python-setup.html</id><summary type="html">&lt;h1 id="working-with-python"&gt;Working With Python&lt;a href="#working-with-python" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In order to work with python, use a virtual environment. This requires installing
&lt;em&gt;virtualenv&lt;/em&gt; and &lt;em&gt;virtualenvwrapper&lt;/em&gt;. The latter gives extra commands to
&lt;em&gt;virutalenv&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="setup-virtual-environments"&gt;Setup Virtual Environments&lt;a href="#setup-virtual-environments" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="install-distribute-and-pip"&gt;Install Distribute and Pip&lt;a href="#install-distribute-and-pip" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;curl -O http://python-distribute.org/distribute_setup.py
sudo python distribute_setup.py
sudo easy_install pip
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="install-virtualenv-and-virutalenvwrapper"&gt;Install VirtualEnv And VirutalEnvwrapper&lt;a href="#install-virtualenv-and-virutalenvwrapper" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="setup-virtualenv"&gt;Setup VirtualEnv&lt;a href="#setup-virtualenv" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;export WORKON_HOME=~/.virtualenv&lt;/span&gt;
&lt;span class="x"&gt;mkdir &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;echo "export WORKON_HOME=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="x"&gt;" &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="setup-virtualenvwrapper"&gt;Setup VirtualEnvWrapper&lt;a href="#setup-virtualenvwrapper" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;echo "source /usr/local/bin/virtualenvwrapper.sh" &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="extra-tips-and-tricks"&gt;Extra tips and tricks:&lt;a href="#extra-tips-and-tricks" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="ensures-that-if-pip-creates-an-extra-virtual-environment-it-is-also-placed-in-our-workon_home-directory"&gt;Ensures that if pip creates an extra virtual environment, it is also placed in our WORKON_HOME directory:&lt;a href="#ensures-that-if-pip-creates-an-extra-virtual-environment-it-is-also-placed-in-our-workon_home-directory" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;echo "export PIP_VIRTUALENV_BASE=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="x"&gt;" &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="creating-virtual-environments"&gt;Creating Virtual Environments&lt;a href="#creating-virtual-environments" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Obtain the version of the python executable that is needed (if the defaults are not wanted):&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; PPA to get the required version&lt;/li&gt;
&lt;li&gt;Manually get what version is wanted:&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; for the version that is wanted&lt;/li&gt;
&lt;li&gt;Use wget to get the wanted version, for example, &lt;code&gt;wget http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Untar, configure and make&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a new virtual environment with a new version of Python:&lt;/li&gt;
&lt;li&gt;The default python executable is always chosen by default. To change this, use the &lt;code&gt;-p&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkvirutalenv -p /usr/bin/python2.6 env_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id="quick-command-reference"&gt;Quick Command Reference&lt;a href="#quick-command-reference" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;lsvirtualenv&lt;/strong&gt; - lists all installed virtual environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rmvirtualenv&lt;/strong&gt; - will remove a virtual environment.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes&lt;/li&gt;&lt;li&gt;https://www.python.org/downloads/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="sysadmin"></category><category term="python"></category></entry><entry><title>Rabin-Karp Substring Search</title><link href="http://web-pages.github.io/notes/rabin-karp-substring-search.html" rel="alternate"></link><updated>2015-07-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-07-05:notes/rabin-karp-substring-search.html</id><summary type="html">&lt;p&gt;This article is a summary of the &lt;a href="https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"&gt;Rabin-Karp&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; section of the &lt;a href="https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-string-searching-algorithms/"&gt;topcoder introduction to string search&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="the-string-searchingmatching-problem"&gt;The String Searching/Matching Problem&lt;a href="#the-string-searchingmatching-problem" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="niave-method"&gt;Niave method&lt;a href="#niave-method" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="rabin-karp-algorithm"&gt;Rabin Karp Algorithm&lt;a href="#rabin-karp-algorithm" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm&lt;/li&gt;&lt;li&gt;https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-string-searching-algorithms/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="rolling hash"></category><category term="substring"></category><category term="topcoder"></category></entry><entry><title>Next Permutation</title><link href="http://web-pages.github.io/notes/next-permutation.html" rel="alternate"></link><updated>2015-07-02T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-07-02:notes/next-permutation.html</id><summary type="html">&lt;p&gt;This is a &lt;a href="https://leetcode.com/problems/next-permutation/"&gt;LeetCode problem&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a href="#problem-statement" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).&lt;/p&gt;
&lt;p&gt;The replacement must be in-place, do not allocate extra memory. Here are some examples. Inputs are in the left-hand
column and its corresponding outputs are in the right-hand column.&lt;/p&gt;
&lt;div class="admonition pre"&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id="solution"&gt;Solution&lt;a href="#solution" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="find-1st-non-increasing-number"&gt;Find 1st Non-Increasing Number&lt;a href="#find-1st-non-increasing-number" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;, where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is the size of the sequence.&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code"&gt;Code&lt;a href="#code" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;nextPermutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Find 1st non-increasing number&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Find min number greater than num[i-1]&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="explanation"&gt;Explanation&lt;a href="#explanation" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, note that the sequence should be initially ordered. Assume an arbitrary
sequence: 12653. It was assumed that this sequence was sorted, so the input
would have been 12356. The algorithm would do the following to &lt;strong&gt;12653&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Scan from right to left&lt;/strong&gt; and stop at the first number non-increasing number.
  In this case, it would be 2, because 2 is smaller than 6.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scan from right to left again&lt;/strong&gt;, but this time, find the minimum number that
  is greater than 2. In this case, it is 3.&lt;/li&gt;
&lt;li&gt;Swap 2 and 3, the resulting number is &lt;em&gt;13652&lt;/em&gt;. The numbers after 3, namely
  &lt;em&gt;652&lt;/em&gt; are in decreasing order from left to right. All that is left to find the
  next lexigraphical permutation is to reverse this sequence into &lt;em&gt;256&lt;/em&gt;. So the
  end result is &lt;strong&gt;13256&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://leetcode.com/problems/next-permutation/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="coding puzzle"></category><category term="leetcode"></category><category term="permutation"></category></entry><entry><title>Permutations</title><link href="http://web-pages.github.io/notes/permutations.html" rel="alternate"></link><updated>2015-07-02T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-07-02:notes/permutations.html</id><summary type="html">&lt;h1 id="introduction"&gt;Introduction&lt;a href="#introduction" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are many ways to calculate permutations. &lt;a href="https://en.wikipedia.org/wiki/Robert_Sedgewick_(computer_scientist)"&gt;Robert Sedgewick&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; wrote
a survey paper in 1977 titled &lt;a href="pdfs/Permutation_Generation_Methods.pdf"&gt;Permutation Generation Methods&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; that is still very cited.
The paper indicates that at that time, &lt;a href="https://en.wikipedia.org/wiki/Heap's_algorithm"&gt;Heap's algorithm&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;
was the most effective algorithm for producing permutations.&lt;/p&gt;
&lt;h1 id="time-efficiency"&gt;Time Efficiency&lt;a href="#time-efficiency" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Iterating through permutations of a list of size &lt;span class="math"&gt;\(n\)&lt;/span&gt; will always be &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt;. Therefore
even with todays computers, we cannot calculate large values of &lt;span class="math"&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="barrys-recursive-permutation-generator"&gt;Barry's Recursive Permutation Generator&lt;a href="#barrys-recursive-permutation-generator" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This algorithm is even worse than &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt;, it is: &lt;span class="math"&gt;\(O(n!\cdot n)\)&lt;/span&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;permute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="advantages"&gt;Advantages&lt;a href="#advantages" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I understand this method quite well.&lt;/li&gt;
&lt;li&gt;It can produce permutations in lexical order (provided the list starts off sorted).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="disadvantages"&gt;Disadvantages&lt;a href="#disadvantages" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It is extremely inefficient in time, with &lt;span class="math"&gt;\(O(n!\cdot n)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;It requires &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt; space needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="backtracking-with-exchanges"&gt;Backtracking With Exchanges&lt;a href="#backtracking-with-exchanges" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This algorithm is much simpler and is &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt;. It cannot not produce permutations
in lexigraphical order. It is still not as efficient as Heap's algorithm due to
there being a constant of 2 in the big-o, in fact, it is in reality &lt;span class="math"&gt;\(O(2\cdot n!)\)&lt;/span&gt;.
This makes a difference when we are dealing with &lt;span class="math"&gt;\(n!\)&lt;/span&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;permute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//Lambda to generate permutations&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="advantages_1"&gt;Advantages&lt;a href="#advantages_1" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It is very simple to implement and write on a whiteboard.&lt;/li&gt;
&lt;li&gt;It is time &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt; and space &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="disadvantages_1"&gt;Disadvantages&lt;a href="#disadvantages_1" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Still not as efficient as Heap's algorithm&lt;/li&gt;
&lt;li&gt;Cannot iterate in lexical order&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="heaps-algorithm"&gt;Heap's algorithm&lt;a href="#heaps-algorithm" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Heap's permuation algorithm is very simple to implement&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;permute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;swapidx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;swapidx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="advantages_2"&gt;Advantages&lt;a href="#advantages_2" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It is very simple to implement and write on a whiteboard.&lt;/li&gt;
&lt;li&gt;It is time &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt; and space &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The constant for factor for &lt;span class="math"&gt;\(O(n!)\)&lt;/span&gt; is 1. This is a huge advantage when dealing
 with factorials.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="disadvantages_2"&gt;Disadvantages&lt;a href="#disadvantages_2" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Does not iterate in lexical order&lt;/li&gt;
&lt;li&gt;Does not leave the state of the original list in the same order when finished.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, it should be noted that there may be faster algorithms nowadays.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Robert_Sedgewick_(computer_scientist)&lt;/li&gt;&lt;li&gt;pdfs/Permutation_Generation_Methods.pdf&lt;/li&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Heap's_algorithm&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="permutation"></category><category term="algorithms"></category></entry><entry><title>Primal Blueprint: Food To Avoid</title><link href="http://web-pages.github.io/notes/primal-blueprint-food-to-avoid.html" rel="alternate"></link><updated>2015-06-29T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-06-29:notes/primal-blueprint-food-to-avoid.html</id><summary type="html">
&lt;h1 id="the-primal-blueprint-what-food-to-avoid"&gt;The primal blueprint: What Food To Avoid&lt;a class="headerlink" href="#the-primal-blueprint-what-food-to-avoid" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="avoid-all-grains"&gt;Avoid All Grains&lt;a class="headerlink" href="#avoid-all-grains" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Grains offer a great majority of their calories in the form of &lt;strong&gt;carbs&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Most grains contain &lt;span class="pelican-inline"&gt;phytates&lt;/span&gt; that bind to important minerals making them
  more difficult to abosrb&lt;ul&gt;
&lt;li&gt;&lt;em&gt;calcium, magnesium&lt;/em&gt; and &lt;em&gt;zinc&lt;/em&gt; are examples of such minerals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some grains contain &lt;span class="pelican-inline"&gt;gluten&lt;/span&gt;, which tends to trigger an auto-immune response
  due to it closely mimicing viruses.&lt;/li&gt;
&lt;li&gt;Grains contain high levels of mild plant toxins called &lt;span class="pelican-inline"&gt;lectins&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Grains To Avoid&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wheat&lt;/li&gt;
&lt;li&gt;Rice&lt;/li&gt;
&lt;li&gt;Oats&lt;/li&gt;
&lt;li&gt;Cornmeal&lt;/li&gt;
&lt;li&gt;Barley&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="avoid-polyunsaturated-fats-pufas"&gt;Avoid Polyunsaturated Fats (PUFAs)&lt;a class="headerlink" href="#avoid-polyunsaturated-fats-pufas" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;PUFAs To Avoid&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Canola Oil&lt;/li&gt;
&lt;li&gt;Margerine&lt;/li&gt;
&lt;li&gt;Corn, safflower, sunflower, soybean and cottonsead oil&lt;/li&gt;
&lt;li&gt;Vegetable shortening&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="avoid-trans-and-partially-hydrogenated-fats"&gt;Avoid Trans And Partially Hydrogenated Fats&lt;a class="headerlink" href="#avoid-trans-and-partially-hydrogenated-fats" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Partially Hydrogenated, Hydrogenated and Trans fats are evil. Avoid at all costs.
They are found in most processed foods, including:&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Trans and Hydrogenated Fats To Avoid&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Frozen dinners&lt;/li&gt;
&lt;li&gt;Candy&lt;/li&gt;
&lt;li&gt;Packaged snacks (crackers, chips and cookies)&lt;/li&gt;
&lt;li&gt;Peanut butter&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="avoid-legumes"&gt;Avoid Legumes&lt;a class="headerlink" href="#avoid-legumes" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Legumes have significant levels of &lt;strong&gt;carbs&lt;/strong&gt;. Most legumes are non-digestible/toxic
to mammals, and need to be altered (cooked) for consumption.&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Legumes To Avoid&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Alfalfa&lt;/li&gt;
&lt;li&gt;Beans&lt;/li&gt;
&lt;li&gt;Lentils&lt;/li&gt;
&lt;li&gt;Peanuts&lt;/li&gt;
&lt;li&gt;Peas&lt;/li&gt;
&lt;li&gt;Soy products&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="chapter summary"></category><category term="diet"></category><category term="health"></category><category term="primal"></category></entry><entry><title>Primal Blueprint: Food To Eat</title><link href="http://web-pages.github.io/notes/primal-blueprint-food-to-eat.html" rel="alternate"></link><updated>2015-06-29T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-06-29:notes/primal-blueprint-food-to-eat.html</id><summary type="html">&lt;h1 id="primal-blueprint-eating-pyramid"&gt;Primal Blueprint Eating Pyramid&lt;a href="#primal-blueprint-eating-pyramid" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img style="max-width: 60%" src="images/primal-blueprint-food-pyramid.png" alt="Primal Blueprint Food Pyramid"&gt;&lt;/p&gt;
&lt;h1 id="meat-fowl-and-fish"&gt;Meat, Fowl and Fish&lt;a href="#meat-fowl-and-fish" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="fish"&gt;Fish&lt;a href="#fish" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fish are a rich source of &lt;em&gt;Omega-3 fatty acids&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="farmed-fish"&gt;Farmed Fish&lt;a href="#farmed-fish" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Farmed Fish To Eat&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fresh water &lt;em&gt;coho Salmon&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Barramudi, catfish, crayfish and tilapia&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Trout&lt;/em&gt; farmed in Canada or USA.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Shell fish&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;Avoid &lt;em&gt;farmed Atlantic salmon&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="vegetables"&gt;Vegetables&lt;a href="#vegetables" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Vegetables To Eat&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avocado&lt;/li&gt;
&lt;li&gt;Beets&lt;/li&gt;
&lt;li&gt;Broccoli&lt;/li&gt;
&lt;li&gt;Brussels Sprouts&lt;/li&gt;
&lt;li&gt;Carrots&lt;/li&gt;
&lt;li&gt;Cauliflower&lt;/li&gt;
&lt;li&gt;Eggplant&lt;/li&gt;
&lt;li&gt;Garlic&lt;/li&gt;
&lt;li&gt;Kale&lt;/li&gt;
&lt;li&gt;Onion&lt;/li&gt;
&lt;li&gt;Red bell pepper&lt;/li&gt;
&lt;li&gt;Spinach&lt;/li&gt;
&lt;li&gt;Yellow squash&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="coconut-products"&gt;Coconut Products&lt;a href="#coconut-products" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Use Coconut Products&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Coconut oil&lt;/li&gt;
&lt;li&gt;Coconut milk&lt;/li&gt;
&lt;li&gt;Coconut butter&lt;/li&gt;
&lt;li&gt;Coconut water&lt;/li&gt;
&lt;li&gt;Cocnut flakes&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="medium-fatty-acids"&gt;Medium Fatty Acids&lt;a href="#medium-fatty-acids" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Coconuts are an excellent source of &lt;span class="pelican-inline"&gt;medium fatty acids&lt;/span&gt; (very difficult to find in other foods)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Offers protection against heart disease, cancer, diabetes extract&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="snacks"&gt;Snacks&lt;a href="#snacks" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Farmed Fish To Eat&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Biltong&lt;/li&gt;
&lt;li&gt;Celery (enjoy with some cream cheese)&lt;/li&gt;
&lt;li&gt;Cottage cheese (enjoy with nuts, berries, balsamic vinegar etc)&lt;/li&gt;
&lt;li&gt;Dark chocolate&lt;/li&gt;
&lt;li&gt;Fish (canned tuna)&lt;/li&gt;
&lt;li&gt;Fresh berries (raspberries, blueberries, blackberries, strawberries)&lt;/li&gt;
&lt;li&gt;Hard-boiled eggs (sprinkle some salt and olive oil)&lt;/li&gt;
&lt;li&gt;Macadamia nuts&lt;/li&gt;
&lt;li&gt;Olives&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="fruits"&gt;Fruits&lt;a href="#fruits" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Some fruits should be eaten in moderation due to high fructose. Look for fruits that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;High in anti-oxidants&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Have a low Total &lt;a href="http://thepaleodiet.com/fruits-and-sugars/"&gt;Metabolic Fructose&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;sup id="sf-primal-blueprint-food-to-eat-1-back"&gt;&lt;a href="#sf-primal-blueprint-food-to-eat-1" title="A measure of how much fructose a particular fruit has" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;span class="pelican-inline"&gt;Avoid fruit juice&lt;/span&gt; - it is high in sugar, and low in macro nutrients&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Best Fruits To Eat&lt;/p&gt;
&lt;p&gt;These fruits are &lt;em&gt;high anti-oxidant, low glycemic, low TMF&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All berries (strawberries, blueberries, blackberries etc)&lt;/li&gt;
&lt;li&gt;Most pitted fruits (cherries, peaches, apricots)&lt;/li&gt;
&lt;li&gt;Avocados&lt;/li&gt;
&lt;li&gt;Casaba melon&lt;/li&gt;
&lt;li&gt;Lime and Lemon&lt;/li&gt;
&lt;li&gt;Tomato&lt;/li&gt;
&lt;li&gt;Guava&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Good Fruits To Eat&lt;/p&gt;
&lt;p&gt;These fruits are &lt;em&gt;lower anti-oxidant, higher glycemic, medium TMF&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apples&lt;/li&gt;
&lt;li&gt;Bananas&lt;/li&gt;
&lt;li&gt;Cantaloupe&lt;/li&gt;
&lt;li&gt;Grapefruit&lt;/li&gt;
&lt;li&gt;Kiwi&lt;/li&gt;
&lt;li&gt;Pomegranate&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Moderate These Fruits&lt;/p&gt;
&lt;p&gt;These fruits are &lt;em&gt;low anti-oxidant, high glycemic, higher TMF&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dates&lt;/li&gt;
&lt;li&gt;Dried fruits&lt;/li&gt;
&lt;li&gt;Grapes (all types of grapes)&lt;/li&gt;
&lt;li&gt;Mangoes&lt;/li&gt;
&lt;li&gt;Melons&lt;/li&gt;
&lt;li&gt;Nectarines&lt;/li&gt;
&lt;li&gt;Oranges&lt;/li&gt;
&lt;li&gt;Papayas&lt;/li&gt;
&lt;li&gt;Pineapples&lt;/li&gt;
&lt;li&gt;Plums&lt;/li&gt;
&lt;li&gt;Tangerines&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="herbs-and-spices"&gt;Herbs And Spices&lt;a href="#herbs-and-spices" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These are &lt;strong&gt;great&lt;/strong&gt; - &lt;span class="pelican-inline"&gt;eat as much as you want&lt;/span&gt;&lt;/p&gt;
&lt;h1 id="nuts-and-seeds"&gt;Nuts And Seeds&lt;a href="#nuts-and-seeds" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Should be ground up and added to salads etc - but don't overdo it!&lt;/p&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://thepaleodiet.com/fruits-and-sugars/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-primal-blueprint-food-to-eat-1"&gt;A measure of how much fructose a particular fruit has &lt;a href="#sf-primal-blueprint-food-to-eat-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="chapter summary"></category><category term="diet"></category><category term="health"></category><category term="primal"></category></entry><entry><title>Gym Exercises</title><link href="http://web-pages.github.io/notes/gym-exercises.html" rel="alternate"></link><updated>2015-06-09T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-06-09:notes/gym-exercises.html</id><summary type="html">
&lt;p&gt;&lt;img alt="Muscle Physiology" src="images/major_muscles_and_functions.jpg"/&gt;&lt;/p&gt;
&lt;h1 id="lower-body"&gt;Lower Body&lt;a class="headerlink" href="#lower-body" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="deadlift"&gt;Deadlift&lt;a class="headerlink" href="#deadlift" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/-4qRntuXBSc" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin"&gt;To Begin&lt;a class="headerlink" href="#to-begin" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Feet&lt;/strong&gt; slightly wider than hip width, toes pointing out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands&lt;/strong&gt; just outside legs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shoulder blades&lt;/strong&gt; directly over the bar.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement"&gt;Movement&lt;a class="headerlink" href="#movement" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Keep chest high.&lt;/li&gt;
&lt;li&gt;Keep hips out.&lt;/li&gt;
&lt;li&gt;Back erect with very slight arch.&lt;/li&gt;
&lt;li&gt;Bar must roll up the shins and stay in line with legs.&lt;/li&gt;
&lt;li&gt;When reaching mid-way point of lift, push hips outward.&lt;/li&gt;
&lt;li&gt;Hold for two seconds.&lt;/li&gt;
&lt;li&gt;Return bar to gound, pushing hips inwards, and slightly bending the knees.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Do not arch the back by letting the chest drop and shoulders go slack.&lt;/li&gt;
&lt;li&gt;Hips must always be higher than your knee - never let it drop below the knee.&lt;/li&gt;
&lt;li&gt;Do not lean backwards or forwards throughout the movement - keep it straight.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="front-squat"&gt;Front Squat&lt;a class="headerlink" href="#front-squat" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/K4ZqhPxsGU8" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_1"&gt;To Begin&lt;a class="headerlink" href="#to-begin_1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Feet slightly wider than shoulder width (so there is space to squat)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_1"&gt;Movement&lt;a class="headerlink" href="#movement_1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Keep chest up.&lt;/li&gt;
&lt;li&gt;Keep core tight.&lt;/li&gt;
&lt;li&gt;Squat to at least parallel to the floor (can go below parallel, as long as chest is up)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this_1"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="glute-bridges"&gt;Glute Bridges&lt;a class="headerlink" href="#glute-bridges" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/vhxhgkYHeWg" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_2"&gt;To Begin&lt;a class="headerlink" href="#to-begin_2" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_2"&gt;Movement&lt;a class="headerlink" href="#movement_2" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_2"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_2" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="lunge"&gt;Lunge&lt;a class="headerlink" href="#lunge" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/D7KaRcUTQeE" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_3"&gt;To Begin&lt;a class="headerlink" href="#to-begin_3" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_3"&gt;Movement&lt;a class="headerlink" href="#movement_3" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_3"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_3" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="standing-calf-raise"&gt;Standing Calf Raise&lt;a class="headerlink" href="#standing-calf-raise" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/FL-ybHijnyw" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_4"&gt;To Begin&lt;a class="headerlink" href="#to-begin_4" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_4"&gt;Movement&lt;a class="headerlink" href="#movement_4" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_4"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_4" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="squat"&gt;Squat&lt;a class="headerlink" href="#squat" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/Dy28eq2PjcM" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_5"&gt;To Begin&lt;a class="headerlink" href="#to-begin_5" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Feet&lt;/strong&gt;: Shoulder width apart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Toes&lt;/strong&gt;: at a comfortable outwards pointing position.&lt;/li&gt;
&lt;li&gt;Rest Bar on upper shoulders&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_5"&gt;Movement&lt;a class="headerlink" href="#movement_5" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Keep chest up.&lt;/li&gt;
&lt;li&gt;Lower body as if going to sit in a small chair.&lt;/li&gt;
&lt;li&gt;Stop when hips are lower than knees.&lt;/li&gt;
&lt;li&gt;While putting pressure on the heels, lead with chest while using glutes to rise.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this_5"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_5" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Heels&lt;/strong&gt;: must be firmly on the ground throughout the movement&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knees&lt;/strong&gt;: make sure they don't track inwards.&lt;/li&gt;
&lt;li&gt;Do not place bar at the base of kneck – keep it at the upper trap&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="upper-body"&gt;Upper Body&lt;a class="headerlink" href="#upper-body" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="arnold-press"&gt;Arnold Press&lt;a class="headerlink" href="#arnold-press" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/xle9sUwq2ao" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_6"&gt;To Begin&lt;a class="headerlink" href="#to-begin_6" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Place weights on your upper legs - pump up legs to start with weights.&lt;/li&gt;
&lt;li&gt;Start with palms facing in, drop elbows so dumbbells are facing chest.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_6"&gt;Movement&lt;a class="headerlink" href="#movement_6" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Push dumbbells apart, rotating arms forward.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this_6"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_6" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Arms leaning forward - keep forearms upright.&lt;/li&gt;
&lt;li&gt;Focus all effort on shoulder, do not make a big wrist movement.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="bench-press"&gt;Bench Press&lt;a class="headerlink" href="#bench-press" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/gRVjAtPip0Y" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_7"&gt;To Begin&lt;a class="headerlink" href="#to-begin_7" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_7"&gt;Movement&lt;a class="headerlink" href="#movement_7" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_7"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_7" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="bent-over-rows"&gt;Bent Over Rows&lt;a class="headerlink" href="#bent-over-rows" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="to-begin_8"&gt;To Begin&lt;a class="headerlink" href="#to-begin_8" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_8"&gt;Movement&lt;a class="headerlink" href="#movement_8" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_8"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_8" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="dips"&gt;Dips&lt;a class="headerlink" href="#dips" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/wjUmnZH528Y" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_9"&gt;To Begin&lt;a class="headerlink" href="#to-begin_9" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_9"&gt;Movement&lt;a class="headerlink" href="#movement_9" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_9"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_9" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="dumbbell-pullover"&gt;Dumbbell Pullover&lt;a class="headerlink" href="#dumbbell-pullover" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/Ydpy886udzo" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_10"&gt;To Begin&lt;a class="headerlink" href="#to-begin_10" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_10"&gt;Movement&lt;a class="headerlink" href="#movement_10" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_10"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_10" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="external-rotations"&gt;External Rotations&lt;a class="headerlink" href="#external-rotations" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/tijDtTzNdu8" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_11"&gt;To Begin&lt;a class="headerlink" href="#to-begin_11" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_11"&gt;Movement&lt;a class="headerlink" href="#movement_11" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_11"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_11" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="landmine-chest-press"&gt;Landmine Chest Press&lt;a class="headerlink" href="#landmine-chest-press" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/1G-_FTEkoNw" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_12"&gt;To Begin&lt;a class="headerlink" href="#to-begin_12" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Start on knees, about shoulder width apart.&lt;/li&gt;
&lt;li&gt;Grab barbell right at the end, clasp both hands together to make a solid base.&lt;/li&gt;
&lt;li&gt;Bring it right below the chin.&lt;/li&gt;
&lt;li&gt;Lean slightly towards the bar.&lt;/li&gt;
&lt;li&gt;Keep the back straight.&lt;/li&gt;
&lt;li&gt;Chest up, shoulders tucked in together, and elbows tucked in.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_12"&gt;Movement&lt;a class="headerlink" href="#movement_12" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Press to get the full extension of the arms, &lt;em&gt;sqeezing chest the entire way&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Bring bar down slowly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this_12"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_12" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="overhead-press"&gt;Overhead Press&lt;a class="headerlink" href="#overhead-press" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/F3QY5vMz_6I" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_13"&gt;To Begin&lt;a class="headerlink" href="#to-begin_13" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_13"&gt;Movement&lt;a class="headerlink" href="#movement_13" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_13"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_13" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="russian-twist"&gt;Russian Twist&lt;a class="headerlink" href="#russian-twist" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/wkD8rjkodUI" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_14"&gt;To Begin&lt;a class="headerlink" href="#to-begin_14" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_14"&gt;Movement&lt;a class="headerlink" href="#movement_14" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_14"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_14" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="t-bar-row"&gt;T-Bar Row&lt;a class="headerlink" href="#t-bar-row" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/rvbjGSQ2tVE" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_15"&gt;To Begin&lt;a class="headerlink" href="#to-begin_15" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Feet shoulder width apart.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_15"&gt;Movement&lt;a class="headerlink" href="#movement_15" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_15"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_15" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="upright-row"&gt;Upright Row&lt;a class="headerlink" href="#upright-row" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/jaAV-rD45I0" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_16"&gt;To Begin&lt;a class="headerlink" href="#to-begin_16" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Feet shoulder width apart.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="movement_16"&gt;Movement&lt;a class="headerlink" href="#movement_16" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Pull elbows up.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="avoid-this_16"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_16" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="weighed-crunch"&gt;Weighed Crunch&lt;a class="headerlink" href="#weighed-crunch" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/NGRKFMKhF8s" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3 id="to-begin_17"&gt;To Begin&lt;a class="headerlink" href="#to-begin_17" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="movement_17"&gt;Movement&lt;a class="headerlink" href="#movement_17" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="avoid-this_17"&gt;Avoid This&lt;a class="headerlink" href="#avoid-this_17" title="Permanent link"&gt;&lt;/a&gt;&lt;/h3&gt;</summary><category term="exercise"></category><category term="health"></category><category term="primal"></category></entry><entry><title>Primal Blueprint Eating Philosophy</title><link href="http://web-pages.github.io/notes/primal-blueprint-eating-philosophy.html" rel="alternate"></link><updated>2015-06-09T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-06-09:notes/primal-blueprint-eating-philosophy.html</id><summary type="html">&lt;h1 id="insulin"&gt;Insulin&lt;a href="#insulin" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Insulin is vital for survival. Cell receptors use insulin as a key to unlock pores with the membrane of each cell. It's an elegant way to eliminate &lt;span class="pelican-inline"&gt;excess glucose from the bloodstream (which is highly toxic)&lt;/span&gt; which is then stored as &lt;a href="http://en.wikipedia.org/wiki/Glycogen"&gt;glycogen&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; (glycogen is used as fuel) for a later date.&lt;/p&gt;
&lt;h2 id="excess-insulin"&gt;Excess Insulin&lt;a href="#excess-insulin" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Excessive inslulin is bad!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Muscles and liver are not able to store high amounts of glycogen.&lt;/li&gt;
&lt;li&gt;Excess glucose not used in "real-time" (i.e. during exercise) get converted into &lt;span class="pelican-inline"&gt;triglycerides&lt;/span&gt; and stored in fat cells.&lt;/li&gt;
&lt;li&gt;High blood insulin level &lt;span class="math"&gt;\(\implies\)&lt;/span&gt; the fat cells that store excess glucose also stores the fat of of your most recent meal.&lt;/li&gt;
&lt;li&gt;Excess insulin is pro-inflammatory.&lt;/li&gt;
&lt;li&gt;High insulin levels leads to insulin resistance:&lt;ul&gt;
&lt;li&gt;Cell receptors become &lt;em&gt;desensitized&lt;/em&gt; to insulin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moderate insulin levels leads to insulin sensitivity:&lt;ul&gt;
&lt;li&gt;Liver and muscles are more effective at absorbing nutrients transported by insulin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="excess-insulin-and-heart-disease"&gt;Excess Insulin And Heart Disease&lt;a href="#excess-insulin-and-heart-disease" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Insulin promotes platelet adhesiveness (sticky platelets clot more easily).&lt;/li&gt;
&lt;li&gt;Insulin promotes the conversion of &lt;span class="pelican-inline"&gt;macrophages&lt;/span&gt; (a type of white blood cell) into foam cells. These are the cells that fill with cholesterol and accumulate in arterial walls.&lt;/li&gt;
&lt;li&gt;Insulin reduces blood levels of nitric oxide (a compound that relaxes the arterial wall lining) causing arteries to become more rigid. This increases blood pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="insulin-resistant-consequences"&gt;Insulin Resistant Consequences&lt;a href="#insulin-resistant-consequences" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;More glucose stays in blood. This is bad, glucose is toxic.&lt;/li&gt;
&lt;li&gt;More insulin is produced as a result of the elevated levels of glucose in the blood.&lt;/li&gt;
&lt;li&gt;Fat cells can't release their stored energy into the bloodstream since insulin keeps the "fat locked inside"&lt;/li&gt;
&lt;li&gt;Fat cells get bigger (i.e. you gain weight).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="insulin-and-excercise"&gt;Insulin And Excercise&lt;a href="#insulin-and-excercise" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Excercise creates insulin sensitivity:&lt;ul&gt;
&lt;li&gt;Exercise empties muscles and liver of glyocgen.&lt;/li&gt;
&lt;li&gt;Insulin will then transport nutrients to liver and muscles instead of going to fat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="cholesterol"&gt;Cholesterol&lt;a href="#cholesterol" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Convential wisdom says you must lower your cholesterol intake. This is not true: The &lt;a href="http://en.wikipedia.org/wiki/Framingham_Heart_Study"&gt;Framingham Heart Study&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; totally refutes this. Study director Dr William Catelli&lt;sup id="sf-primal-blueprint-eating-philosophy-1-back"&gt;&lt;a href="#sf-primal-blueprint-eating-philosophy-1" title="Excellent article: Framingham Flip FlopL3" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; summarized the issue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serum cholesterol is not a strong risk factor for heart disease&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Study's highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;There is no correlation between dietary cholesterol and blood cholesterol levels&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Framingham residents who ate the most cholesterol, saturated fats and total calories weighed the least and were the most physically active.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lipoproteins"&gt;Lipoproteins&lt;a href="#lipoproteins" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Cholesterol is fat-soluble&lt;/span&gt; (i.e. it does not disolve in water), so in order to travel in the "water blood environment", it carried by special particles called &lt;a href="http://en.wikipedia.org/wiki/Lipoprotein"&gt;lipoproteins&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;3 Important Lipoproteins&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;VLDL&lt;/strong&gt; - Very low density lipoproteins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LDL&lt;/strong&gt; - Low density lipoproteins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HDL&lt;/strong&gt; - High density lipoproteins &lt;strong&gt;&amp;lt;= good cholesterol&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h3 id="vldl"&gt;VLDL&lt;a href="#vldl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VLDL are manufactured in the liver in the presence of high levels of triglycerides.&lt;ul&gt;
&lt;li&gt;Therefore they comprise 80% triglycerides and very little cholesterol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Once triglycerides have been deposited, their size decreases and they convert into on of two types of LDL carrying mostly cholesterol&lt;/span&gt;:&lt;ol&gt;
&lt;li&gt;Large fluffy LDLs&lt;/li&gt;
&lt;li&gt;Small dense LSLs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ldl"&gt;LDL&lt;a href="#ldl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Large fluffly "boyant" LDL are generally harmless (even at high levels).&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Small dense LDL are extremely dangerous and cause heart disease&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Small dense LDLs result when there are excessive triglycerides in the blood,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small dense LDL result from high levels of carbs:
&lt;/p&gt;
&lt;div class="math"&gt;$$
\text{Carbs }\rightarrow\text{ Insulin }\rightarrow\text{ Triglycerides }\rightarrow\text{ VDL }\rightarrow\text{ Small Dense LDLs}
$$&lt;/div&gt;
&lt;h3 id="hdl"&gt;HDL&lt;a href="#hdl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Good cholesterol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Cleans up any damages or oxidized cholesterol&lt;/li&gt;
&lt;li&gt;Removes small dense LDLs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Increase HDL by exercising and consuming saturated fat&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="oxidation"&gt;Oxidation&lt;a href="#oxidation" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lipoproteins, if oxidized become damaged and are dangerous. Oxidation can happen for multiple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High intake of unstable polyunsaturated fats (PUFAs) from vegetable oils.&lt;/li&gt;
&lt;li&gt;Reduction of natural antioxidants.&lt;/li&gt;
&lt;li&gt;Low level of HDL.&lt;/li&gt;
&lt;li&gt;Small dense LDLs do not bind as easily to the LDL receptors on muscles and fat cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;&lt;a href="http://en.wikipedia.org/wiki/Atherosclerosis"&gt;Atherosclerosis&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt; occurs in the arteries and not the veins because venous blood has little oxygen&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Oxidation and inflammation &lt;span class="pelican-inline"&gt;has little to do with total cholesterol (or even total LDL cholesterol) and is instead the result of the oxidation of a small fraction of the total amount of LDL - the small dense LDL particles&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="blood-tests"&gt;Blood Tests&lt;a href="#blood-tests" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Most common blood tests do not distinguish between the benign "fluffy" LDL (sometimes called pattern A) and the small dense particles (sometimes called pattern B).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here are some good articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/how-to-interpret-cholesterol-test-results/#axzz3ZB2yhrJh"&gt;How to interpret cholesterol tests&lt;/a&gt;&lt;sup class="print"&gt;L6&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/how-to-interpret-advanced-cholesterol-test-results/#axzz3ZB8x2c4p"&gt;How to interpret advanced cholesterol tests&lt;/a&gt;&lt;sup class="print"&gt;L7&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The straight dope on cholesterol: 10 things you need to know&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-1/#axzz3ZB8x2c4p"&gt;part 1&lt;/a&gt;&lt;sup class="print"&gt;L8&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-2/#axzz3ZB8x2c4p"&gt;part 2&lt;/a&gt;&lt;sup class="print"&gt;L9&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;What to measure in a blood test&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;C-Reactive Protein&lt;/strong&gt; (Hs-CRP) - produced as an immune system response. High levels associated with increased risk of heart attack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lp2A&lt;/strong&gt; - Key inflammation marker associated with small dense LDL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A1c&lt;/strong&gt; (Estimated average glucose) - Measures how much glucose is attached to hemoglobin molecule. Much better than common blood glucose reading.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fasting Blood Insulin Levels&lt;/strong&gt; - High fasting insulin levels are indicitive of prediabetic conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="macro-nutrients"&gt;Macro Nutrients&lt;a href="#macro-nutrients" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are three major macro nutrients:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protein&lt;/li&gt;
&lt;li&gt;Carbohydrate&lt;/li&gt;
&lt;li&gt;Fat&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="protein"&gt;Protein&lt;a href="#protein" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Optimal protein intake is 0.5 to 1.0 gram of protein per pound of lean body mass per day&lt;/span&gt;:&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Calculate Lean Body Mass&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, determine total weight and percentage of body fat.&lt;/li&gt;
&lt;li&gt;Multiply total weight by percentage of body fat to get your &lt;em&gt;fat&lt;/em&gt; weight.&lt;/li&gt;
&lt;li&gt;Subtract &lt;em&gt;fat&lt;/em&gt; weight from total body weight to get &lt;em&gt;lean body mass&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;Eating protein:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If exercising and a &lt;em&gt;no&lt;/em&gt; low carb diet&lt;sup id="sf-primal-blueprint-eating-philosophy-2-back"&gt;&lt;a href="#sf-primal-blueprint-eating-philosophy-2" title="For example, the Atkins DietL10." class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, protein will go towards repair or building cell walls.&lt;/li&gt;
&lt;li&gt;If there is not much &lt;em&gt;insulin&lt;/em&gt; in the blood, the protein cannot easily be stored as fat and so &lt;span class="pelican-inline"&gt;the body is forced to raise the metabolic rate and increasing ketone production&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="carbohydrates"&gt;Carbohydrates&lt;a href="#carbohydrates" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Carbohydrates control insulin; insulin controls fat storage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only used for fuel.&lt;/li&gt;
&lt;li&gt;All forms of carbs are eventually converted to glucose:&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;A limited amount of glucose&lt;/span&gt; will be stored as glycogen in muscles in liver.&lt;/li&gt;
&lt;li&gt;Most glucose gets converted to fatty acids and stored in fat cells.&lt;/li&gt;
&lt;li&gt;It's the job of insulin to take glucose out of the blood stream (glucose is toxic).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Unless one depletes lots of glycogen every day, there is no reason to consume high levels of carbs&lt;/span&gt;:
 * Carbs are not essential in our diets (proteins and fats are essential).&lt;/p&gt;
&lt;h3 id="daily-carb-intake"&gt;Daily Carb Intake&lt;a href="#daily-carb-intake" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img style="max-width: 60%" src="images/carb-curve.jpg" alt="Carbohydrate Curve"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0-50 grams&lt;/strong&gt;: Ketosis and accelerated fat burning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;50-100 grams&lt;/strong&gt;: Primal sweetspot = effortless weight loss.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;100-150 grams&lt;/strong&gt;: Primal blueprint maintenance range.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;150-300 grams&lt;/strong&gt;: Steady insiduous weight gain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;300 grams and more&lt;/strong&gt;: Danger zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fat"&gt;Fat&lt;a href="#fat" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Consuming ample &lt;em&gt;healthy&lt;/em&gt; fats is good]&lt;/span&gt; (this goes against conventional wisdom):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingesting fats makes you feel full (unlike carbs).&lt;/li&gt;
&lt;li&gt;Fats have little or no impact on glucose levels (and therefore insulin)&lt;ul&gt;
&lt;li&gt;Fats takes far longer than carbs to metabolize =&amp;gt; deeper longer lasting satisfaction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://en.wikipedia.org/wiki/Nurses%27_Health_Study"&gt;nurses health study&lt;/a&gt;&lt;sup class="print"&gt;L11&lt;/sup&gt; concluded that total fat intake is not statistically correlated to heart disease.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="good-fats"&gt;Good Fats&lt;a href="#good-fats" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=""&gt;Saturated&lt;/a&gt; and &lt;a href=""&gt;Omega 3&lt;/a&gt; fats are healthy fats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Omega-3_fatty_acid"&gt;Omega 3&lt;/a&gt;&lt;sup class="print"&gt;L12&lt;/sup&gt; - found in fishy oils. The optimum ratio between Omega-6:Omega-3 is out of balance&lt;ul&gt;
&lt;li&gt;Decrease Omega-6, increase Omega-3. The ratio should ideally be 2:1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Saturated_fat"&gt;Saturated Fats&lt;/a&gt;&lt;sup class="print"&gt;L13&lt;/sup&gt; - found in red meat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bad-fats"&gt;Bad Fats&lt;a href="#bad-fats" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Omega-6_fatty_acid"&gt;Omega 6&lt;/a&gt;&lt;sup class="print"&gt;L14&lt;/sup&gt; - fats in processed foods (omega 6 is needed to live, but ratio between omega 3 is scewed in modern diets).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Trans_fat"&gt;Partially hydrogenated and trans fats&lt;/a&gt;&lt;sup class="print"&gt;L15&lt;/sup&gt; - made by heating and chemically treating vegetable/seed oils to become solid. &lt;span class="pelican-inline"&gt;These fats are evil - avoid at all costs&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="carbs-make-fats-look-bad"&gt;Carbs Make Fats Look Bad&lt;a href="#carbs-make-fats-look-bad" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fats are calorically dense. &lt;span class="pelican-inline"&gt;If eaten with carbs, the insulin from the carbs will result in making one fat.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id="ketones-the-fourth-fuel"&gt;Ketones - The Fourth Fuel&lt;a href="#ketones-the-fourth-fuel" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ketones&lt;sup id="sf-primal-blueprint-eating-philosophy-3-back"&gt;&lt;a href="#sf-primal-blueprint-eating-philosophy-3" title="They are actually called Ketone BodiesL16" class="simple-footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;span class="pelican-inline"&gt;are a by product of the fatty acid fuel used by the liver to extract glucose from proteins. It is an energy rich form of fuel that is both safe and desirable to use.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ketones can't be stored like fat or glycogen - they just circulate the blood stream where they can be used by any cell.&lt;/li&gt;
&lt;li&gt;Ketosis is the scientific name for when ketones accumulate in the body and can be used for energy.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Glycogen&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Framingham_Heart_Study&lt;/li&gt;&lt;li&gt;http://www.proteinpower.com/drmike/cardiovascular-disease/framingham-flip-flop/&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Lipoprotein&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Atherosclerosis&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/how-to-interpret-cholesterol-test-results/#axzz3ZB2yhrJh&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/how-to-interpret-advanced-cholesterol-test-results/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-1/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-2/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Atkins_diet&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Nurses%27_Health_Study&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Omega-3_fatty_acid&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Saturated_fat&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Omega-6_fatty_acid&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Trans_fat&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Ketone_bodies#Impact_upon_pH&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-primal-blueprint-eating-philosophy-1"&gt;Excellent article: &lt;a href="http://www.proteinpower.com/drmike/cardiovascular-disease/framingham-flip-flop/"&gt;Framingham Flip Flop&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt; &lt;a href="#sf-primal-blueprint-eating-philosophy-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-primal-blueprint-eating-philosophy-2"&gt;For example, the &lt;a href="http://en.wikipedia.org/wiki/Atkins_diet"&gt;Atkins Diet&lt;/a&gt;&lt;sup class="print"&gt;L10&lt;/sup&gt;. &lt;a href="#sf-primal-blueprint-eating-philosophy-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-primal-blueprint-eating-philosophy-3"&gt;They are actually called &lt;a href="http://en.wikipedia.org/wiki/Ketone_bodies#Impact_upon_pH"&gt;Ketone Bodies&lt;/a&gt;&lt;sup class="print"&gt;L16&lt;/sup&gt; &lt;a href="#sf-primal-blueprint-eating-philosophy-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="chapter summary"></category><category term="diet"></category><category term="health"></category><category term="primal"></category></entry><entry><title>EncFS</title><link href="http://web-pages.github.io/notes/encfs.html" rel="alternate"></link><updated>2015-06-02T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-06-02:notes/encfs.html</id><summary type="html">&lt;h1 id="encfs"&gt;EncFS&lt;a href="#encfs" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.arg0.net/#!encfs/c1awt"&gt;EncFS&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;sup id="sf-encfs-1-back"&gt;&lt;a href="#sf-encfs-1" title="Wikipedia article:  http://en.wikipedia.org/wiki/EncFSL2" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; is an encrypted FUSE file system. It
integrates very well with dropbox allowing a local encrypted volume that will be
replicated on the cloud. Unlike TrueCrypt, &lt;em&gt;encfs&lt;/em&gt; volumes are not a fixed size
and can therefore grow and shrink when needed.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;a href="#installation" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="ubuntu"&gt;Ubuntu&lt;a href="#ubuntu" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install in ubuntu: &lt;code&gt;sudo apt-get install encfs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="mac-os-yosemite"&gt;Mac OS Yosemite&lt;a href="#mac-os-yosemite" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href="http://imojito.com/encfs-mac-osx-10-10-yosemite.html"&gt;these instructions&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;a href="#usage" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;encfs /path/to/encrypted/folder /path/to/decrypted/mount&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="automatic-mount-on-login"&gt;Automatic Mount On Login&lt;a href="#automatic-mount-on-login" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="ubuntu_1"&gt;Ubuntu&lt;a href="#ubuntu_1" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This involves installing &lt;a href=""&gt;gnome-encfs&lt;/a&gt;. For detailed instructions, see
&lt;a href="https://help.ubuntu.com/community/FolderEncryption#Automatically_Mounting_on_Startup"&gt;this ubuntu community help article&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu community help - https://help.ubuntu.com/community/FolderEncryption&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.arg0.net/#!encfs/c1awt&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/EncFS&lt;/li&gt;&lt;li&gt;http://imojito.com/encfs-mac-osx-10-10-yosemite.html&lt;/li&gt;&lt;li&gt;https://help.ubuntu.com/community/FolderEncryption#Automatically_Mounting_on_Startup&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-encfs-1"&gt;Wikipedia article:
 &lt;a href="http://en.wikipedia.org/wiki/EncFS"&gt;http://en.wikipedia.org/wiki/EncFS&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; &lt;a href="#sf-encfs-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="linux"></category><category term="sysadmin"></category><category term="cryptography"></category></entry><entry><title>JavaScript</title><link href="http://web-pages.github.io/notes/javascript.html" rel="alternate"></link><updated>2015-05-20T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-05-20:notes/javascript.html</id><summary type="html">&lt;h1 id="javascript"&gt;JavaScript&lt;a href="#javascript" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="language-features"&gt;Language Features&lt;a href="#language-features" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"&gt;let&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"&gt;iterators and generators&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield"&gt;yield&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*"&gt;yield*&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Promises:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.html5rocks.com/en/tutorials/es6/promises/"&gt;promises - there and back again&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt; - most thourough explanation I have found so far&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.domenic.me/youre-missing-the-point-of-promises/"&gt;you're missing the point of promises&lt;/a&gt;&lt;sup class="print"&gt;L6&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="explanations"&gt;Explanations&lt;a href="#explanations" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/code-adventures/callbacks-vs-coroutines-174f1fe66127"&gt;Callbacks Vs Coroutines&lt;/a&gt;&lt;sup class="print"&gt;L7&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators"&gt;Solving Callbacks With Generators&lt;/a&gt;&lt;sup class="print"&gt;L8&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&lt;/li&gt;&lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&lt;/li&gt;&lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield&lt;/li&gt;&lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*&lt;/li&gt;&lt;li&gt;http://www.html5rocks.com/en/tutorials/es6/promises/&lt;/li&gt;&lt;li&gt;https://blog.domenic.me/youre-missing-the-point-of-promises/&lt;/li&gt;&lt;li&gt;https://medium.com/code-adventures/callbacks-vs-coroutines-174f1fe66127&lt;/li&gt;&lt;li&gt;http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="javascript"></category></entry><entry><title>Atom Editor</title><link href="http://web-pages.github.io/notes/atom-editor.html" rel="alternate"></link><updated>2015-05-15T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-05-15:notes/atom-editor.html</id><summary type="html">&lt;h1 id="atom-editor"&gt;Atom Editor&lt;a href="#atom-editor" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="installingupgrading"&gt;Installing/Upgrading&lt;a href="#installingupgrading" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For linux, installing and upgrading are identical:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href="https://github.com/atom/atom/releases"&gt;atom releases&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; site and download the latest &lt;code&gt;atom-amd64.deb&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Install/Upgrade by doing the following: &lt;code&gt;sudo dpkg -i atom-amd64.deb&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="installing-plugins"&gt;Installing Plugins&lt;a href="#installing-plugins" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To install plugins (called packages in atom):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;code&gt;Edit&lt;/code&gt; drop down menu&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Preferences&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On the &lt;em&gt;left side menu&lt;/em&gt;, select &lt;code&gt;Install&lt;/code&gt; (it is the last option)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Search and install the desired package.&lt;/p&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://github.com/atom/atom/releases&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="atom"></category><category term="IDE"></category><category term="editor"></category></entry><entry><title>Working With FPGA's</title><link href="http://web-pages.github.io/notes/working-with-fpgas.html" rel="alternate"></link><updated>2015-05-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-05-12:notes/working-with-fpgas.html</id><summary type="html">&lt;h1 id="pre-requisites"&gt;Pre-Requisites&lt;a href="#pre-requisites" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wl.altera.com/download/software/quartus-ii-we/12.1sp1"&gt;Quartus II web edition&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="background"&gt;Background&lt;a href="#background" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="hardware"&gt;Hardware&lt;a href="#hardware" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Embedded Video Here&lt;/p&gt;
&lt;h3 id="transistors"&gt;Transistors&lt;a href="#transistors" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="logic-gates-and-or-not"&gt;Logic Gates: And, Or, Not&lt;a href="#logic-gates-and-or-not" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="combinational-circuits"&gt;Combinational Circuits&lt;a href="#combinational-circuits" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Explanation of combinatorial circuits&lt;/p&gt;
&lt;h4 id="adder"&gt;Adder&lt;a href="#adder" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="multiplexor"&gt;Multiplexor&lt;a href="#multiplexor" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id="sequential-circuit"&gt;Sequential Circuit&lt;a href="#sequential-circuit" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;introduce two invertors connected back to back&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RS Latch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D Latch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clock-cycle"&gt;Clock Cycle&lt;a href="#clock-cycle" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="flip-flop"&gt;Flip Flop&lt;a href="#flip-flop" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="registers"&gt;Registers&lt;a href="#registers" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="shift-registers"&gt;Shift Registers&lt;a href="#shift-registers" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="finite-state-machines"&gt;Finite State Machines&lt;a href="#finite-state-machines" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id="video"&gt;Video&lt;a href="#video" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://wl.altera.com/download/software/quartus-ii-we/12.1sp1&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="fpga"></category></entry><entry><title>Sliding Window Maximum</title><link href="http://web-pages.github.io/notes/sliding-window-maximum.html" rel="alternate"></link><updated>2015-05-04T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-05-04:notes/sliding-window-maximum.html</id><summary type="html">
&lt;p&gt;A long array A[] is given to you. There is a sliding window of size w which is moving from the very left of the array to the very right. You can only see the w numbers in the window. Each time the sliding window moves rightwards by one position. Following is an example:&lt;/p&gt;
&lt;div class="admonition pre"&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;The array is [1 3 -1 -3 5 3 6 7], and w is 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; A long array A[], and a window width w&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; An array B[], B[i] is the maximum value of from A[i] to A[i+w-1]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requirement:&lt;/strong&gt; Find a good optimal way to get B[i]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="solutions"&gt;Solutions&lt;a class="headerlink" href="#solutions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;</summary><category term="data structures"></category><category term="dequeue"></category><category term="doubly linkedlist"></category><category term="algorithms"></category><category term="leetcode"></category></entry><entry><title>Alfabeto</title><link href="http://web-pages.github.io/notes/alfabeto.html" rel="alternate"></link><updated>2015-04-11T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-11:notes/alfabeto.html</id><summary type="html">&lt;h2 id="a-ah"&gt;A - ah&lt;a class="headerlink" href="#a-ah" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="b-beh"&gt;B - beh&lt;a class="headerlink" href="#b-beh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="c-theh"&gt;C - theh&lt;a class="headerlink" href="#c-theh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="d-deh"&gt;D - deh&lt;a class="headerlink" href="#d-deh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="e-eh"&gt;E - eh&lt;a class="headerlink" href="#e-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="f-eff-eh"&gt;F - eff-eh&lt;a class="headerlink" href="#f-eff-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="g-heh"&gt;G - heh&lt;a class="headerlink" href="#g-heh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="h-atch-eh"&gt;H - atch-eh&lt;a class="headerlink" href="#h-atch-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="i-ee"&gt;I - ee&lt;a class="headerlink" href="#i-ee" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="j-hota"&gt;J - hota&lt;a class="headerlink" href="#j-hota" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="k-ka"&gt;K - ka&lt;a class="headerlink" href="#k-ka" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="l-el-eh"&gt;L - el-eh&lt;a class="headerlink" href="#l-el-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="m-em-eh"&gt;M - em-eh&lt;a class="headerlink" href="#m-em-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="n-en-eh"&gt;N - en-eh&lt;a class="headerlink" href="#n-en-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="n-en-yeh"&gt;Ñ - en-yeh&lt;a class="headerlink" href="#n-en-yeh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="o-oh"&gt;O - oh&lt;a class="headerlink" href="#o-oh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="p-peh"&gt;P - peh&lt;a class="headerlink" href="#p-peh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="q-coo"&gt;Q - coo&lt;a class="headerlink" href="#q-coo" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="r-er-eh"&gt;R - er-eh&lt;a class="headerlink" href="#r-er-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="s-ess-eh"&gt;S - ess-eh&lt;a class="headerlink" href="#s-ess-eh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="t-teh"&gt;T - teh&lt;a class="headerlink" href="#t-teh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="u-oo"&gt;U - oo&lt;a class="headerlink" href="#u-oo" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="v-oo-veh"&gt;V - oo-veh&lt;a class="headerlink" href="#v-oo-veh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="w-oo-veh-dob-leh"&gt;W - oo-veh-dob-leh&lt;a class="headerlink" href="#w-oo-veh-dob-leh" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="x-eh-kees"&gt;X - eh-kees&lt;a class="headerlink" href="#x-eh-kees" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="y-ee-gree-eh-ga"&gt;Y - ee-gree-eh-ga&lt;a class="headerlink" href="#y-ee-gree-eh-ga" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="z-theh-ta"&gt;Z - theh-ta&lt;a class="headerlink" href="#z-theh-ta" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;</summary><category term="pronounciation"></category></entry><entry><title>C++</title><link href="http://web-pages.github.io/notes/C-Plus-Plus.html" rel="alternate"></link><updated>2015-04-08T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-08:notes/C-Plus-Plus.html</id><summary type="html">&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cppsamples.com/"&gt;C++ Samples&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; - Amazing site with brilliant and insightful samples for C++&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cplusplus.com/"&gt;C++ Reference&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; - Excellent C++ reference site.&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cplusplus.com/reference/stl/"&gt;STL Containers&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cplusplus.com/reference/clibrary/"&gt;C Library&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.cppsamples.com/&lt;/li&gt;&lt;li&gt;http://www.cplusplus.com/&lt;/li&gt;&lt;li&gt;http://www.cplusplus.com/reference/stl/&lt;/li&gt;&lt;li&gt;http://www.cplusplus.com/reference/clibrary/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="c++"></category><category term="programming"></category></entry><entry><title>Imperative Vs Declarative</title><link href="http://web-pages.github.io/notes/imperative-vs-declarative.html" rel="alternate"></link><updated>2015-04-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-05:notes/imperative-vs-declarative.html</id><summary type="html">&lt;h1 id="definitions"&gt;Definitions&lt;a href="#definitions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="imperative"&gt;Imperative&lt;a href="#imperative" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Imperative programming&lt;/em&gt;: tells the “machine” how to do something, 
and as a result what you want to happen will happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imperative programming is a paradigm that &lt;span class="pelican-inline"&gt;describes computation in terms
of statements that change a program state&lt;/span&gt;. In much the same way that the
&lt;a href="http://en.wikipedia.org/wiki/Imperative_mood"&gt;imperative mood&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; in natural
languages&lt;sup id="sf-imperative-vs-declarative-1-back"&gt;&lt;a href="#sf-imperative-vs-declarative-1" title="A natural language (or ordinary language) is any language which arises, unpremeditated, in the brains of human beings. These are the  languages humans use to communicate. They are distinguished from constructed  and formal languages such as those used to program computers or to study logic" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; expresses commands to take action, imperative programs define
sequences of commands for the computer to perform. &lt;span class="pelican-inline"&gt; In general, Imperative
programming is focused on describing &lt;strong&gt;how&lt;/strong&gt; a program operates&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="procedural-programming"&gt;Procedural Programming&lt;a href="#procedural-programming" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A procedural paradigm means a program is built from one or more procedures
(also known as subroutines or functions). The idea is that state changes are
localized to procedures or restricted to explicit arguments and returns from
procedures (this is known as [structured programming](http://en.wikipedia.org/wiki/Structured_programming.
Structured programming is normally promoted to improve the maintainability
and overall quality of imperative programs.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;Object Oriented Programming&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;
is just an extension of the structured pogramming paradigm.&lt;/p&gt;
&lt;h3 id="disadvantages-of-imperative-programming"&gt;Disadvantages Of Imperative Programming&lt;a href="#disadvantages-of-imperative-programming" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="declarative"&gt;Declarative&lt;a href="#declarative" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Declarative programming&lt;/em&gt;: tells the “machine” what you would like 
to happen, and lets the machine figure out how to do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Declarative programs are often described as a program that is not imperative,
although a number of common definitions do exist:&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Declarative Programming Definitions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A program that describes what computation should be performed and not how to compute it&lt;/li&gt;
&lt;li&gt;Any programming language that lacks &lt;a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt; (or more specifically, is &lt;a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)"&gt;referentially transparent&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;A language with a clear correspondence to mathematical logic.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id="programming-examples"&gt;Programming Examples&lt;a href="#programming-examples" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://latentflip.com/imperative-vs-declarative/"&gt;Imperative Vs Declarative&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt; - Blog post with some nice examples&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Imperative_mood&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Object-oriented_programming&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Side_effect_(computer_science)&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)&lt;/li&gt;&lt;li&gt;http://latentflip.com/imperative-vs-declarative/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-imperative-vs-declarative-1"&gt;A natural language (or ordinary language) is any language
which arises, unpremeditated, in the brains of human beings. These are the 
languages humans use to communicate. They are distinguished from constructed 
and formal languages such as those used to program computers or to study
logic &lt;a href="#sf-imperative-vs-declarative-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="compiler"></category><category term="computer science"></category></entry><entry><title>Machine Learning Week 1</title><link href="http://web-pages.github.io/notes/machine-learning-week-1.html" rel="alternate"></link><updated>2015-04-05T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-05:notes/machine-learning-week-1.html</id><summary type="html">&lt;h1 id="week-1"&gt;Week 1&lt;a class="headerlink" href="#week-1" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are several types of machine learning algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unsupervised&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reinforcement Learning&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommender Systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="supervised-learning-introduction"&gt;Supervised Learning Introduction&lt;a class="headerlink" href="#supervised-learning-introduction" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Two common supervised learning outcomes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regression - predict a real number output&lt;/li&gt;
&lt;li&gt;Classification - a discrete valued prediction&lt;/li&gt;
&lt;/ol&gt;</summary><category term="machine learning"></category><category term="computer science"></category></entry><entry><title>Exchange Traded Funds</title><link href="http://web-pages.github.io/notes/exchange-traded-funds.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/exchange-traded-funds.html</id><summary type="html">&lt;p&gt;&lt;/p&gt;&lt;div class="videobox"&gt;
&lt;iframe src="https://www.youtube.com/embed/eahR6DzTnN0" height="390" mozallowfullscreen="" width="640" frameborder="0" allowfullscreen="" webkitallowfullscreen=""&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h1 id="definition"&gt;Definition&lt;a href="#definition" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An ETF, or exchange traded fund, is a marketable security that tracks an index, a commodity, bonds, or a basket of assets like an index fund. Unlike mutual funds, an ETF trades like a common stock on a stock exchange. ETFs experience price changes throughout the day as they are bought and sold. ETFs typically have higher daily liquidity and lower fees than mutual fund shares, making them an attractive alternative for individual investors&lt;sup id="sf-exchange-traded-funds-1-back"&gt;&lt;a href="#sf-exchange-traded-funds-1" title="See http://www.investopedia.com/terms/e/etf.aspL1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="advantages-of-etfs"&gt;Advantages Of ETFs&lt;a href="#advantages-of-etfs" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Low management fees&lt;/li&gt;
&lt;li&gt;Diversification&lt;/li&gt;
&lt;li&gt;Tax Efficiency - turnover is lower because it is passively managed. This leads to less opportunities for capital gains taxes.&lt;/li&gt;
&lt;li&gt;Transparency - get daily transparency&lt;/li&gt;
&lt;li&gt;Intraday Pricing - can be traded throughout the day&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="etfs-are-access-products"&gt;ETFs Are Access Products&lt;a href="#etfs-are-access-products" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ETFs allow access to a variety of asset classes and areas:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/etfs-are-access-products.png" alt="ETFS Are Access Products"&gt;&lt;/p&gt;
&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Exchange-traded_fund"&gt;Wikipedia Entry&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.investopedia.com/terms/e/etf.asp&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Exchange-traded_fund&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-exchange-traded-funds-1"&gt;See &lt;a href="http://www.investopedia.com/terms/e/etf.asp"&gt;http://www.investopedia.com/terms/e/etf.asp&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; &lt;a href="#sf-exchange-traded-funds-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="finance"></category><category term="etf"></category></entry><entry><title>Greetings</title><link href="http://web-pages.github.io/notes/greetings.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/greetings.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;!Buenos días!&lt;/strong&gt; - Good morning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!Buenas tardes!&lt;/strong&gt; - Good afternoon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!Beunas noches!&lt;/strong&gt; - Good night&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!Adios&lt;/strong&gt; - Goodbye&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Informal Hi how are you&lt;/p&gt;
&lt;p&gt;Hola, ¿Qué tal estás?
Hola, ¿Cómo estás?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Formal Hi how are you&lt;/p&gt;
&lt;p&gt;Hola, ¿Qué tal está?
Hola, ¿Cómo está?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Goodbyes&lt;/p&gt;
&lt;p&gt;Adios - goodbye
Hasta luego - see you later
Hasta manana - see you tomorrow
Hasta pronto - see you soon
Hasta el dia de la... see you on...&lt;/p&gt;
&lt;/div&gt;</summary><category term="expressions"></category></entry><entry><title>Interest</title><link href="http://web-pages.github.io/notes/interest.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/interest.html</id><summary type="html"></summary><category term="finance"></category><category term="interest"></category></entry><entry><title>Personal Information</title><link href="http://web-pages.github.io/notes/personal-information.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/personal-information.html</id><summary type="html"></summary><category term="expressions"></category></entry><entry><title>The best investment advice you'll never get</title><link href="http://web-pages.github.io/notes/the-best-investment-advice-youll-never-get.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/the-best-investment-advice-youll-never-get.html</id><summary type="html">&lt;h1 id="the-best-investment-advice-youll-never-get"&gt;The best investment advice you'll never get&lt;a href="#the-best-investment-advice-youll-never-get" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As Google’s historic August 2004 IPO approached, the company’s senior vice president, Jonathan Rosenberg, realized he was about to spawn hundreds of impetuous young multimillionaires. They would, he feared, become the prey of Wall Street brokers, financial advisers, and wealth managers, all offering their own get-even-richer investment schemes. Scores of them from firms like J.P. Morgan Chase, UBS, Morgan Stanley, and Presidio Financial Partners were already circling company headquarters in Mountain View with hopes of presenting their wares to some soon-to-be-very-wealthy new clients.&lt;/p&gt;
&lt;p&gt;Rosenberg didn’t turn the suitors away; he simply placed them in a holding pattern. Then, to protect Google’s staff, he proposed a series of in-house investment teach-ins, to be held before the investment counselors were given a green light to land. Company founders Sergey Brin and Larry Page and CEO Eric Schmidt were excited by the idea and gave it the go-ahead.&lt;/p&gt;
&lt;p&gt;One by one, some of the most revered names in investment theory were brought in to school a class of brilliant engineers, programmers, and cybergeeks on the fine art of personal investing, something few of them had thought much about. First to arrive was [&lt;em&gt;]Stanford University’s William (Bill) Sharpe, 1990 Nobel Laureate economist and professor emeritus of finance at the Graduate School of Business[&lt;/em&gt;]&lt;sup id="sf-the-best-investment-advice-youll-never-get-1-back"&gt;&lt;a href="#sf-the-best-investment-advice-youll-never-get-1" title="William SharpeL1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Sharpe drew a large and enthusiastic audience, which he could have wowed with a PowerPoint presentation on his “gradient method for asset allocation optimization” or his “returns-based style analysis for evaluating the performance of investment funds.” But he spared the young geniuses all that complexity and offered a simple formula instead. [&lt;em&gt;]“Don’t try to beat the market,” he said. Put your savings into some indexed mutual funds, which will make you just as much money (if not more) at much less cost by following the market’s natural ebb and flow, and get on with building Google[&lt;/em&gt;].&lt;/p&gt;
&lt;p&gt;The following week it was Burton Malkiel, formerly dean of the Yale School of Management and now a professor of economics at Princeton and author of the classic A Random Walk Down Wall Street. The book, which you’d be unlikely to find on any broker’s bookshelf, suggests that a “blindfolded monkey” will, in the long run, have as much luck picking a winning investment portfolio as a professional money manager. Malkiel’s advice to the Google folks was in lockstep with Sharpe’s. Don’t try to beat the market, he said, and don’t believe anyone who tells you they can—not a stock broker, a friend with a hot stock tip, or a financial magazine article touting the latest mutual fund. Seasoned investment professionals have been hearing this anti-industry advice, and the praises of indexing, for years. But to a class of 20-something quants who’d grown up listening to stories of tech stocks going through the roof and were eager to test their own ability to outpace the averages, the discouraging message came as a surprise. Still, they listened and pondered as they waited for the following week’s lesson from John Bogle.&lt;/p&gt;
&lt;p&gt;“Saint Jack” is the living scourge of Wall Street. Though a self-described archcapitalist and lifelong Republican, on the subject of brokers and financial advisers he sounds more like a seasoned Marxist. “The modern American financial system,” Bogle says in his book The Battle for the Soul of Capitalism, “is undermining our highest social ideals, damaging investors’ trust in the markets, and robbing them of trillions.” But most of his animus in Mountain View was reserved for mutual funds, his own field of business, which he described as an industry organized around “salesmanship rather than stewardship,” which “places the interests of managers ahead of the interests of shareholders,” and is “the consummate example of capitalism gone awry.”&lt;/p&gt;
&lt;p&gt;Bogle’s closing advice was as simple and direct as that of his predecessors: those brokers and financial advisers hovering at the door are there for one reason and one reason only—to take your money through exorbitant fees and transaction costs, many of which will be hidden from your view. They are, as New York attorney general Eliot Spitzer described them, nothing more than “a giant fleecing machine.” Ignore them all and invest in an index fund. And it doesn’t have to be the Vanguard 500 Index, the indexed mutual fund that Bogle himself built into the largest in the world. Any passively managed index fund will do, because they’re all basically the same.&lt;/p&gt;
&lt;p&gt;When the industry sharks were finally allowed to enter the inner sanctum of Google, they were barraged with questions about their commissions, fees, and hidden costs, and about indexing, the almost cost-free investment strategy the Google employees had been told delivers higher net returns than all other mutual fund strategies. The assembled Wall Streeters were surprised by their reception—and a bit discouraged. Brokers and financial planners don’t like indexed mutual funds for two basic reasons. For one thing, the funds are an affront to their ego because they discount their ability to assemble a winning portfolio, the very talent they’re trained and paid to offer. Also, index funds don’t make brokers and planners much money. If you have your money in an account that’s following the natural movements of the market—also called passive investing—you don’t need fancy managers to watch it for you and charge big bucks to do so.&lt;/p&gt;
&lt;p&gt;Brin and Page were proud of the decision to prepare their staff for the Wall Street predation. And they were glad to have launched their company where and when they did. What took place in Mountain View that spring might have never happened had Google been born in Boston, Chicago, or New York, where much of the financial community remains at war with insurgency forces that first started gathering in San Francisco 35 years ago.&lt;/p&gt;
&lt;p&gt;As Google’s historic August 2004 IPO approached, the company’s senior vice president, Jonathan Rosenberg, realized he was about to spawn hundreds of impetuous young multimillionaires. They would, he feared, become the prey of Wall Street brokers, financial advisers, and wealth managers, all offering their own get-even-richer investment schemes. Scores of them from firms like J.P. Morgan Chase, UBS, Morgan Stanley, and Presidio Financial Partners were already circling company headquarters in Mountain View with hopes of presenting their wares to some soon-to-be-very-wealthy new clients.&lt;/p&gt;
&lt;p&gt;Rosenberg didn’t turn the suitors away; he simply placed them in a holding pattern. Then, to protect Google’s staff, he proposed a series of in-house investment teach-ins, to be held before the investment counselors were given a green light to land. Company founders Sergey Brin and Larry Page and CEO Eric Schmidt were excited by the idea and gave it the go-ahead.&lt;/p&gt;
&lt;p&gt;One by one, some of the most revered names in investment theory were brought in to school a class of brilliant engineers, programmers, and cybergeeks on the fine art of personal investing, something few of them had thought much about. First to arrive was Stanford University’s William (Bill) Sharpe, 1990 Nobel Laureate economist and professor emeritus of finance at the Graduate School of Business. Sharpe drew a large and enthusiastic audience, which he could have wowed with a PowerPoint presentation on his “gradient method for asset allocation optimization” or his “returns-based style analysis for evaluating the performance of investment funds.” But he spared the young geniuses all that complexity and offered a simple formula instead. “Don’t try to beat the market,” he said. Put your savings into some indexed mutual funds, which will make you just as much money (if not more) at much less cost by following the market’s natural ebb and flow, and get on with building Google.&lt;/p&gt;
&lt;p&gt;The following week it was Burton Malkiel, formerly dean of the Yale School of Management and now a professor of economics at Princeton and author of the classic A Random Walk Down Wall Street. The book, which you’d be unlikely to find on any broker’s bookshelf, suggests that a “blindfolded monkey” will, in the long run, have as much luck picking a winning investment portfolio as a professional money manager. Malkiel’s advice to the Google folks was in lockstep with Sharpe’s. Don’t try to beat the market, he said, and don’t believe anyone who tells you they can—not a stock broker, a friend with a hot stock tip, or a financial magazine article touting the latest mutual fund. Seasoned investment professionals have been hearing this anti-industry advice, and the praises of indexing, for years. But to a class of 20-something quants who’d grown up listening to stories of tech stocks going through the roof and were eager to test their own ability to outpace the averages, the discouraging message came as a surprise. Still, they listened and pondered as they waited for the following week’s lesson from John Bogle.&lt;/p&gt;
&lt;p&gt;“Saint Jack” is the living scourge of Wall Street. Though a self-described archcapitalist and lifelong Republican, on the subject of brokers and financial advisers he sounds more like a seasoned Marxist. “The modern American financial system,” Bogle says in his book The Battle for the Soul of Capitalism, “is undermining our highest social ideals, damaging investors’ trust in the markets, and robbing them of trillions.” But most of his animus in Mountain View was reserved for mutual funds, his own field of business, which he described as an industry organized around “salesmanship rather than stewardship,” which “places the interests of managers ahead of the interests of shareholders,” and is “the consummate example of capitalism gone awry.”&lt;/p&gt;
&lt;p&gt;Bogle’s closing advice was as simple and direct as that of his predecessors: those brokers and financial advisers hovering at the door are there for one reason and one reason only—to take your money through exorbitant fees and transaction costs, many of which will be hidden from your view. They are, as New York attorney general Eliot Spitzer described them, nothing more than “a giant fleecing machine.” Ignore them all and invest in an index fund. And it doesn’t have to be the Vanguard 500 Index, the indexed mutual fund that Bogle himself built into the largest in the world. Any passively managed index fund will do, because they’re all basically the same.&lt;/p&gt;
&lt;p&gt;When the industry sharks were finally allowed to enter the inner sanctum of Google, they were barraged with questions about their commissions, fees, and hidden costs, and about indexing, the almost cost-free investment strategy the Google employees had been told delivers higher net returns than all other mutual fund strategies. The assembled Wall Streeters were surprised by their reception—and a bit discouraged. Brokers and financial planners don’t like indexed mutual funds for two basic reasons. For one thing, the funds are an affront to their ego because they discount their ability to assemble a winning portfolio, the very talent they’re trained and paid to offer. Also, index funds don’t make brokers and planners much money. If you have your money in an account that’s following the natural movements of the market—also called passive investing—you don’t need fancy managers to watch it for you and charge big bucks to do so.&lt;/p&gt;
&lt;p&gt;Brin and Page were proud of the decision to prepare their staff for the Wall Street predation. And they were glad to have launched their company where and when they did. What took place in Mountain View that spring might have never happened had Google been born in Boston, Chicago, or New York, where much of the financial community remains at war with insurgency forces that first started gathering in San Francisco 35 years ago.&lt;/p&gt;
&lt;p&gt;It all started in the early 1970s with a group of maverick investment professionals working at Wells Fargo bank. Using the vast new powers of quantitative analysis afforded by computer science, they gradually came to the conclusion that the traditional practices guiding institutional investing in America were, for the most part, not delivering on the promise of better-than-average returns. As a result, the fees that average Americans were paying brokers to engage in these practices were akin to highway robbery. Sure, some highly paid hotshot portfolio managers could occasionally put together a high-return fund. But generally speaking, trying to beat the market—also called active investing—was a fruitless venture.&lt;/p&gt;
&lt;p&gt;The insurrection these mavericks would create eventually caught on and has spread beyond the Bay Area. But San Francisco remains ground zero of the democratizing challenge to America’s vast and lucrative investment industry. Under threat are the billions of dollars that mutual funds and brokers skim every year from often-unwary investors. And every person who has money to invest is affected, whether she’s patching together her own portfolio with a broker, saving for retirement or college, or just making small contributions each year to her 401K. If the movement succeeds, not only will more and more people have a lot more money in their pockets, but the personal investment industry will never look the same.&lt;/p&gt;
&lt;p&gt;I was once a portfolio manager myself, and like the industry folks Google was protecting its employees from, I was certain I could outperform market averages and confident that I was worth the salary paid to do so. However, I left the investment business before this revolt began to brew. In the intervening years, I never stewarded my own investments as judiciously as I’d managed those of my former employers—Bank of America, Industrial Indemnity, and the Bechtel family. I was unhappy with the Wall Street firms I had been using, which had churned my account to make lots of money on the sales, and, despite instructions to the contrary, placed my money in their own funds and underwritings to make even more at my expense. So a couple of years ago, when it finally came time to get my own house in order, I knew I wanted help from an independent adviser, someone who was doing things differently from the big brokerage firms.&lt;/p&gt;
&lt;p&gt;Eventually I found a small financial management firm in Sausalito called Aperio Group that, after only seven years in business, already had a stellar reputation. “Aperio” in Latin means “to make clear, to reveal the truth.” Indeed, truth-telling is key to Aperio’s mission, even if that means badmouthing its own industry in the process. One of the company’s founders, Patrick Geddes, aged 48, is a renegade from the top echelons of his field. For several years he served, first as director of quantitative research, then as CFO, at Morningstar, the nation’s leading company for researching and appraising mutual funds. But when he left, not only was he disenchanted with his own company’s corporate environment, he was also becoming uneasy with the moral underpinning of the entire industry. “Let’s be straight,” says Geddes in his soft-spoken but zealous way. “Being unethical is a good precondition for success in the financial business.”&lt;/p&gt;
&lt;p&gt;His partner, a bright, high-energy Norwegian American named Paul Solli, 49, is another finance guy who didn’t have the gene for corporate culture. After graduating from Dartmouth’s business school, he tried investment banking but didn’t like it. He went out on his own, starting an investment advisory business, but says he flailed about, searching for a business model that would support his desire to “live deliberately” in the Thoreauvian manner.&lt;/p&gt;
&lt;p&gt;Solli and Geddes consider themselves heirs to the Wells Fargo insurgency and, as such, part of a movement that includes academics, some institutional investors, a couple of large index fund companies, and a handful of small firms like their own that are dedicated to bringing the indexing philosophy to badly advised investors like myself. And unlike most mutual fund investment firms, which have $5 million and $10 million minimums, Aperio was willing to take on a messy six-figure portfolio.&lt;/p&gt;
&lt;p&gt;Solli took one look at my unkempt collection of mut­ual funds and said, “You’re being robbed here.” He pointed to funds I had purchased from or through Putnam, Merrill Lynch, Dreyfus, and—yes—Charles Schwab (which referred me to Aperio) and asked, “Do you know that you’re paying these guys to do essentially nothing?” He carefully explained the many ingenious ways fund managers, brokers, and advisers had found to chip away at investors’ returns. Turns out that I, like more than 90 million other suckers who have put close to $9 trillion into mutual funds, was paying annual fees, commissions, and transaction costs well in excess of 2 percent a year on most of my mutual funds (see “What Are the Fees?” page 75). “Do you know what that adds up to?” Solli asked. “At the end of every 36 years, you will only have made half of what you could have, through no fault of your own. And these are fees you needn’t pay, and won’t, if you switch to index funds.”&lt;/p&gt;
&lt;p&gt;All indexing calls for, Solli explains, is the selection of a particular stock market index—the Dow Jones Industrial Average, Standard and Poor’s (S&amp;amp;P) 500, the Russell 1000, or the broader Wilshire 5000—and the purchase of all its stocks and bonds in the exact proportions in which they exist in that index. In an actively managed fund, managers pick stocks they think will outperform a particular index. But the premise of indexing is that stock prices are generally an accurate reflection of a company’s worth at any given time, so there’s no point in trying to beat that price. The worth of a client’s investment goes up or down with the ebb and flow of the market, but the idea is that the market naturally tends to increase over time. Moreover, even if an index fund performed only as well as the expensively managed Merrill Lynch Large Cap mutual fund that was in my portfolio, I would earn more because of the lower fees. Stewarding this kind of investment does not require a staff of securities analysts working under a fund manager who makes $20 million a year. In fact, a desktop computer can do it while they sleep.&lt;/p&gt;
&lt;p&gt;There are always exceptions, of course, Solli says, “a few funds that at any given moment outperform the indexes.” But over the years, he explains, their performances invariably decline, and their highly paid cover-boy managers slide into early obscurity, to be replaced by a new hotshot managing a different fund. If a mutual-fund investor is able to stay abreast of such changes, move their money around from fund to fund, and stay ahead of the averages (factoring in higher commissions and management fees) it will be by sheer luck, says Solli, who then offers me pretty much the same advice John Bogle and his colleagues offered Google. Sell the hyped but fee-laden funds in my portfolio and replace them with boring, low-cost funds like those offered by Bogle’s Vanguard.&lt;/p&gt;
&lt;p&gt;It took Solli a couple more painful meetings and a few dozen trades to clean the parasites out of my account and reinvest the proceeds in index funds, the lifeblood of his business. Without exception, he moved me into funds that have outperformed the ones I was in, like the Vanguard REIT Index Fund, some Pimco bond and stock funds, and Artisan International. And he did it for an annual fee of .5 percent of money under management, saving me over a full percent in overall costs and a lot of taxes in the future. Then he did something I doubt any other financial manager would have done. He fired himself.&lt;/p&gt;
&lt;p&gt;“You really don’t need me anymore,” he said, and closed my Aperio account that day, ending his fees, but not our relationship. I was curious. Who was this guy who was so open about the less-than-dignified ways of his own business? “You have to have lunch with my partner,” he said.&lt;/p&gt;
&lt;p&gt;If Solli is an industry gadfly, Geddes, a modest, unassuming son of a United Church of Christ minister, is its chainsaw massacrer. “We work in the most overcompensated industry in the country,” Geddes admitted before the water was served, “and indexing threatens the revenue flow from managed funds to brokerage houses. That’s why you’ve been kept in the dark about it. This truly is the great secret shame of our business.&lt;/p&gt;
&lt;p&gt;“The industry knows they are peddling bad products,” Geddes continued, “and a lot of people making the most money and getting the most prestige are doing so by gouging their customers.” And Geddes is quick to differentiate between “illegal theft”—the sort of industry scandals Spitzer has uncovered, such as illicit sales practices, undisclosed fees, kickbacks, and after-market trading—and “legal theft,” the stuff built into the cost of doing business that no attorney general can touch, but which in dollar amounts far exceeds investor losses to illegal activity.&lt;/p&gt;
&lt;p&gt;Geddes wasn’t always full of such tough talk about the industry. Not that he had any qualms about speaking his mind; in fact, he was let go from Morningstar in 1996 for being openly critical of the company’s internal culture. “I still think of Morningstar as a potentially positive force in the industry,” he says. “But let’s just say they were weak at conflict management, especially at the senior levels.” It wasn’t until he took a freelance consulting job for Charles Schwab that he really saw the light about indexing.&lt;/p&gt;
&lt;p&gt;“My job was to compile all the academic research on mutual funds, and that’s when it really became clear that active management doesn’t add any value,” he says. When he finished the project, Geddes started teaching a finance class through the University of California extension, where he started preaching his anti-industry gospel. “I had to be careful, because there were a lot of brokers in the class. I started noticing that some of them would get sort of irritated with me.”&lt;/p&gt;
&lt;p&gt;Around this time is when he met Solli. Solli had a client, a doctor who was looking to learn about portfolio management and asked Solli what he thought of Geddes’s UC course. When Solli looked into it, he was bowled over. “Here was this guy who’d been CFO at Morningstar and had this incredible background, and I thought, what the hell is he doing at Berkeley teaching this course to guys like my client? This is too good to be true—I have to meet this guy.”&lt;/p&gt;
&lt;p&gt;Slowly, inadvertently even, Aperio was born. But the fit was perfect. Geddes brought what he calls “the quant piece” to the table; Solli had the strategic vision. After a few months of brainstorming, they set out to see if a couple of guys who held themselves to high ethical standards could make it in the cutthroat financial industry.&lt;/p&gt;
&lt;p&gt;And just how do these guys make money if they keep kicking out clients like me once they switch us into index funds, while alienating others with their irreverent critique of the entire mutual fund game? Geddes does take referrals from investment firms like Charles Schwab, which thrive on the sale of managed mutual funds. So why the rant? Isn’t he, too, in business to make a buck?&lt;/p&gt;
&lt;p&gt;“Absolutely,” he admits. “I’m not Mother Teresa; I’m a capitalist who wants to succeed and make money. I just think the best way to do that is by building trust in a clientele by revealing to them honestly how this business works.”&lt;/p&gt;
&lt;p&gt;Geddes also offers a customized version of indexing (on taxable returns) for wealthier clients, a service that requires an ongoing relationship and supplies Aperio a steadier source of income than my low-six-figure portfolio did. Aperio now has about $800 million under management. It’s a paltry sum compared with those of the big brokerage firms, which deal in the billions or even trillions, but Geddes is fine with that. “If I were making what I could be making in this business, I just wouldn’t like the person I’d have to be.”&lt;/p&gt;
&lt;p&gt;“San Francisco was the only place in the country where this could have happened,” says Bill Fouse, a jazz clarinetist in Marin County who was present when the first shots were fired in the investment rebellion. It was 1970, and revolution was in the air.&lt;/p&gt;
&lt;p&gt;While hippies, dopesters, and antiwar radicals were filling the streets of America’s most tolerant city with rage, sweet smoke, and resistance, a quieter protest was brewing in the lofty, paneled offices of Wells Fargo. There, a young engineer named John Andrew “Mac” McQuown, Fouse (who like many musicians also happens to be a brilliant mathematician), and their self-described “skeptical, suspicious, careful, cautious, and slow-to-change” boss, James Vertin, were taking a hard look at the conventional wisdom that for a century had driven American portfolio management.&lt;/p&gt;
&lt;p&gt;Bank trust departments across the country were staffed by portfolio managers who, as I did at the time, believed that they alone possessed the investment formula that would enrich and protect the security of their customers. “No one argued with that premise,” Fouse recalls.&lt;/p&gt;
&lt;p&gt;But McQuown suspected they were pretty much all wrong. He had met Wells Fargo chairman Ransom Cook at an investment forum in San Jose, and at a later meeting at company headquarters, persuaded him that traditional portfolio management was merely an investment variation of the Great Man theory. “A great man picks stocks that go up. You keep him until his picks don’t work anymore and you search for another great man,” he told Cook. “The whole thing is a chance-driven process. It’s not systematic, and there’s lots we still don’t know about it and that needs study.” Cook offered McQuown a job at Wells and a generous budget to conduct research into the Great Man Theory and other schemes to beat the averages. McQuown accepted, and a few years later Fouse came on as well.&lt;/p&gt;
&lt;p&gt;They couldn’t have been more different: Fouse, a diminutive, mild-mannered musician, and McQuown, a burly, boisterous Scot. The two were like oil and water—McQuown even tried to have Fouse fired at one point—but their boss, Vertin, was the one who really was in the hot seat.&lt;/p&gt;
&lt;p&gt;“You have to understand, Vertin’s career was on the line,” Fouse recalls. “He was, after all, running a department full of portfolio managers and securities analysts whose mission was to outperform the market. Our thesis was that it couldn’t be done.” Proof of McQuown’s theory could lead to the end of an empire, in fact many empires. “The poor guy was under siege,” says Fouse. “It was a nerve-racking time.”&lt;/p&gt;
&lt;p&gt;Vertin’s memory of those times is no less vivid. “Mac the knife was going to own this thing,” he once told a reporter. “I could just see the fin of the shark cutting through the water.” Eventually, the research McQuown and Fouse produced became so strong that Vertin could not ignore it. “In effect it said that almost everything that every trust department in America was doing was wrong,” says Fouse. “But Jim eventually accepted it, even knowing the consequences.”&lt;/p&gt;
&lt;p&gt;In July 1971, the first index fund was created by McQuown and Fouse with a $6 million contribution from the Samsonite Luggage pension fund, which had been referred to Fouse by Bill Sharpe, who was already teaching at Stanford. It was Sharpe’s academic work in the 1960s that formed the theoretical underpinning of indexing and would later earn him the Nobel Prize. The small initial fund performed well, and institutional managers and their trustees took note.&lt;/p&gt;
&lt;p&gt;By the end of the decade, Wells had completely renounced active management, had relieved most of its portfolio managers, and was offering only passive products to its trust department clients. And it had signed up the College Retirement Equities Fund (CREF), the largest pool of equity money in the world, and Harvard University, the largest educational endowment. By 1980 $10 billion had been invested nationwide in index funds; by 1990 that figure had risen to $270 billion, a third of which was held at Wells Fargo bank.&lt;/p&gt;
&lt;p&gt;Eventually the department at Wells that handled index­ing merged with Nikko Securities and was later bought by Barclays Bank, which created the San Francisco subsidiary Barclays Global Investors. Its CEO, Patricia Dunn, the scandal-tinged former chairman of Hewlett-Packard who had worked for 20 years at Wells Fargo, had been heavily influenced by indexing. Running Barclays, she became the world’s largest manager of index funds.&lt;/p&gt;
&lt;p&gt;Fouse, now retired in San Rafael, explains why all this could have happened only in San Francisco. “When we started our research, almost all the trust clients out here were individuals with small accounts. Anywhere else, particularly on the East Coast, trust departments handled very large institutions—pension funds, university endowments, that sort of thing. If Mellon, Chase, or Citibank had done this research and come to the same conclusion, they would have in effect been saying to their large, sophisticated, and very lucrative clientele: ‘We’ve been doing things wrong for a century or more.’ And thousands of very comfortable investment managers would have been out of work.”&lt;/p&gt;
&lt;p&gt;But even in San Francisco, as in the country’s other financial centers, Fouse and McQuown’s findings were not a welcome development for brokers, portfolio managers, or anyone else who thrived on the industry’s high salaries and fees. As a result, the counterattack against indexing began to unfold. Fund managers denied that they had been gouging investors or that there was any conflict of interest in their profession. Workout gear appeared with the slogan “Beat the S&amp;amp;P 500,” and a Minneapolis-based firm, the Leuthold Group, distributed a large poster nationwide depicting the classic Uncle Sam character saying, “Index Funds Are UnAmerican,” implying that anyone who was not trying to beat the averages was nothing more than an unpatriotic wimp. (That poster still hangs on the office walls of many financial planners and fund managers.)&lt;/p&gt;
&lt;p&gt;Savvy investment consumers, however, were apparently catching on. As they began to suspect that the famous fund managers they were reading about in Business Week and Money magazine were taking them for a ride, index funds grew in size and number. And actively managed funds shrank proportionately. Even some highly placed industry insiders started beating the drums for indexing. From her perch at Barclays, CEO Dunn gave a speech at a 2000 annual industry meeting in Chicago. As reported in Business Week at the time, she started out with some tongue-in-cheek comments about fund managers’ “rare gifts and genius,” and then shocked the crowd by going on to denounce the industry’s high fees. According to the article, she even included this zinger: “[Investment managers sell] for the price of a Picasso [what] routinely turns out to be paint-by-numbers sofa art.”&lt;/p&gt;
&lt;p&gt;It’s not as if Merrill Lynch, Putnam, Dreyfus, et al, were being put out of business by this new consciousness, but like any industry threatened with bad ink, the financial community continued to strike back at every opportunity. In May 2003, Matthew Fink, president of the Investment Company Institute, a mutual funds trade association, told convening members that his industry was squeaky clean and has “succeeded because the interests of those who manage funds are well-aligned with the interests of those who invest in mutual funds.” At the same convention, Fink’s remarks were echoed by ICI vice chairman Paul Haaga Jr., who, in his keynote address, pronounced that “our strong tradition of integrity continues to unite us.” Indeed, integrity had been the theme of every ICI membership meeting in recent memory.&lt;/p&gt;
&lt;p&gt;Haaga then attacked his industry’s critics, including former SEC chairmen, members of Congress, academics, journalists, even “a saint with his own statue” (John Bogle). “[They] have all weighed in about our perceived failing,” lamented Haaga. “It makes me wonder what life would be like if we’d actually done something wrong.”&lt;/p&gt;
&lt;p&gt;He didn’t have long to wonder. Four months later, the nation’s first big mutual fund scandal broke when Eliot Spitzer brought civil actions against four major fund managers for allowing preferred investors to buy and sell shares on news or events that occurred after markets had closed. Spitzer compared the practice to “allowing betting on a horse race after the horses have crossed the finish line.” Multimillion dollar fines were issued against the firms, which were also required to compensate customers damaged by what were called market-timing practices.&lt;/p&gt;
&lt;p&gt;The market-timing scandals alone are estimated to have cost fund investors about $4 billion, and other industry violations were uncovered after that. But now more experts are convinced that the amount pales in comparison to the tens of billions lost every year just to the fees and transaction costs by which mutual funds live and die. After the mutual fund scandals broke, Senator Peter Fitzgerald (R-Ill.) called a hearing before the Subcommittee on Financial Management, the Budget, and International Security, and said this in his opening statement: “The mutual fund industry is now the world’s largest skimming oper­ation—a $7 trillion trough from which fund managers, brokers, and other insiders are steadily siphoning off an excessive slice of the nation’s household, college, and retirement savings.”&lt;/p&gt;
&lt;p&gt;No one running a university endowment, independent foundation, or pension fund could match his numbers during his tenure: over the last 21 years, chief investment officer David Swensen has averaged a 16 percent annual return on Yale University’s investment portfolio, which he built with everything from venture capital funds to timber. He’s been called one of the most talented investors in the world. But lately he’s becoming perhaps even more famous for his advice to individual investors, which he first offered in his 2005 book Unconventional Success. “Invest in nonprofit index funds,” he says unequivocally. “Your odds of beating the market in an actively managed fund are less than 1 in 100.”&lt;/p&gt;
&lt;p&gt;And there’s more. A recent entry on the Motley Fool, the popular investment advice website, made the following blanket statement: “Buy an index fund. This is the most actionable, most mathematically supported, short-form investment advice ever.” As long as 10 years ago, in his annual letter to his shareholders, Warren Buffett advised both institutional and individual investors “that the best way to own common stocks is through an index fund that charges minimal fees. Those following this path are sure to beat the net results (after fees and expenses) delivered by the great majority of investment professionals.”&lt;/p&gt;
&lt;p&gt;One would think, with that kind of advice floating about, that the whole country would by now be in index funds. But in the three decades since Wells Fargo kicked things off, only about 40 percent of institutional money and 15 percent of individuals’ money has been invested in index funds. So why is indexing catching on so slowly?&lt;/p&gt;
&lt;p&gt;A big reason, according to Geddes, is that putting investors into index funds is simply not in the interest of the industry that sells securities. “They just won’t accept indexing’s minuscule fees,” he says. By now, most major brokerage firms offer index funds in addition to traditional mutual funds, but money managers typically don’t mention them at all. You usually have to ask about them yourself.&lt;/p&gt;
&lt;p&gt;And it makes a certain kind of sense. If a naive investor calls a broker with &lt;span class="math"&gt;\(100,000 to invest, would the broker be likely to recommend the Vanguard 500 Index with its .19 percent annual fee, of which he receives nothing and collects but a small portion of his firm’s approximately $100 transaction fee? Or might he suggest the client buy Putnam’s Small Cap Growth Fund B Shares, which carry a 2.3 percent annual fee, 1 percent (\)&lt;/span&gt;1,000) of which goes to him? And will he tell his client about the hidden transaction charges that further reduce the return on investment? It’s simply not to his advantage to do so.&lt;/p&gt;
&lt;p&gt;It’s hard to find active fund managers who are willing to talk about these issues. I spoke to several, but no one was comfortable discussing the high cost of their practice, and few were willing to talk on the record. Ron Peyton, president and CEO of Callan Associates, a San Francisco–based institutional investment consulting firm, offered a list of advantages of active management, which essentially boiled down to the fact that it’s more fun. “They can raise and lower cash positions [read: buy and sell whatever stocks excite them at any given moment] and go into fixed-income or foreign securities [read: look for investments wherever they want].” I know from experience that he’s right, but it’s kind of beside the point.&lt;/p&gt;
&lt;p&gt;The most forthright comments came from Baie Netzer, a research analyst in the Orinda office of Litman/Gregory Companies, a San Francisco–based investment management firm specializing in mutual funds. Netzer told me outright, “Eighty percent of active managers underperform the market. But we do believe that some managers add value, and those are the ones we look for.” Still, if you factor in fees and transaction costs, you have to wonder how much that remaining 20 percent would slip.&lt;/p&gt;
&lt;p&gt;But even if the number of active managers who consistently beat the market is small, Stanford’s Bill Sharpe still sees a real need for their services. While he is a strong partisan of index funds, he is neither as surprised nor as concerned as Geddes that they don’t represent a higher proportion of overall investment. “If you’d told me 35 years ago that indexing would one day represent 40 and 15 percent of investments, I would have asked you what you were smoking,” says the personable Sharpe with his characteristic chuckle. If everyone invested in index funds, he points out, the market itself would die a natural death. “We need active managers,” he says. “It’s buyers and sellers who keep prices moving, which is what drives the market. Index funds simply reflect what the market is doing.” He believes we’d even start to see a decline in market efficiency if index funds rose to 50 percent of total investments.&lt;/p&gt;
&lt;p&gt;Does this mean that, when we look at mutual funds, half our options would still be burdened with unconscionable fees and hidden costs? Hopefully not. With the call getting louder from financial experts and industry watchers to reform and regulate mutual funds, it’s hard to believe that the fee system can last much longer, particularly with strong Republican voices like Peter Fitzgerald’s in Congress.&lt;/p&gt;
&lt;p&gt;But while Wall Street has considerable soul-searching to do, full blame for the gouging of naive investors does not lie with the investment management industry alone. There is an innate cultural imperative in this country to beat the odds, to do better than the Joneses. In some ways the Leuthold Group was right when it said that index funds are un-American. It’s simply difficult for most of us to accept average returns on our money, or on anything for that matter. The ultimate example of the nation’s attraction to the big score is, of course, right now under our noses. If on August 18, 2004, you had invested $100,000 in Google, that stock would now be worth $550,000. So while evidence mounts that it’s almost impossible to hit the jackpot with cost-burdened mutual funds—and that for every Google, there’s an Enron—we simply refuse to stop trying.&lt;/p&gt;
&lt;p&gt;Perhaps Solli and Geddes had it right when they selected the name for their company. The real purpose of this whole revolution is “to make things clear, to reveal the truth.” As Solli puts it, “As long as people know what they’re dealing with, they can invest their money with full awareness. Whether it’s playing it safe with indexing or taking a flier on a hedge fund—at least they’re the ones in control.” &lt;/p&gt;
&lt;p&gt;What about hedge funds?&lt;/p&gt;
&lt;p&gt;So, the bulk of your savings is safely tucked away in a sensible index fund or two. Why not set aside 5 or 10 percent and take a chance on the post-dot-com insider’s investment craze?&lt;/p&gt;
&lt;p&gt;It’s certainly tempting. The most high-profile manager, Edward “Eddie” Lampert, has reportedly earned investors in his ESL Investments hedge fund an average return of 29 percent a year since 1988. After successfully buying Kmart with his investors’ money, Lampert turned the merged retailer around and in 2004 personally took home $1 billion.&lt;/p&gt;
&lt;p&gt;Another of the world’s most successful funds is San Francisco’s Farallon Capital Management, which has amassed assets of $12.5 billion over two decades by delivering post-fee returns of 17 percent a year on its flagship fund, according to a 2005 article in Institutional Investor magazine. Forty-eight-year-old Tom Steyer’s investors include universities, pension funds, and individuals; at any one time, the magazine said, the managers there might be nursing 300 to 500 investments in everything from real estate—Farallon recently bought into the Mission Bay development—to international finance.&lt;/p&gt;
&lt;p&gt;But the road from Wall Street is scattered with the bones of bitter hedge fund investors. Since 1995, more than 1,800 known hedge funds have folded completely. In the last few months alone, two large funds—MotherRock and Amaranth Advisors—have gone south.&lt;/p&gt;
&lt;p&gt;The high failure rate should come as no surprise, given how hedge funds operate. There’s no working model, so they vary widely, but the basic idea is that they rely on risky, untraditional investment strategies—ranging from arbitrage to taking over floundering companies, as Lampert did—to make big money fast. The industry is largely unregulated, and most funds involve private partnerships that operate in strict confidence.&lt;/p&gt;
&lt;p&gt;They’re also extremely expensive, which limits their user profile. Though fees average just 2 percent of the investment, the same as in a typical Silicon Valley venture fund, managers also withhold a sizable chunk (averaging 20 percent, but sometimes going as high as 50 percent) of whatever profit the funds produce. The typical minimum required to get into a fund is between $1 million and $5 million.&lt;/p&gt;
&lt;p&gt;The SEC periodically considers applying minimal rules to hedge funds, such as prohibiting pension funds from investing in them. Last October, the call for reform came from Congress when Senator Charles Grassley, chairman of the Senate Finance Committee, asked administration officials and Congress members for their views on how to improve hedge fund transparency. But so far, the hedge fund lobby has managed to keep all regulators at bay. —Mark Dowie&lt;/p&gt;
&lt;p&gt;What are the fees?&lt;/p&gt;
&lt;p&gt;Every fee that a mutual fund charges should be outlined somewhere in its prospectus. But many people don’t even think to look for it, and you can’t necessarily trust your broker to bring it up. “The first step is simply getting people to pay attention to fees,” says Patrick Geddes, chief investment officer of Aperio Group, in Sausalito. Hang tough in asking your broker for the full breakdown of what those fees will cost you each year. If you need help, the National Association of Securities Dealers has a useful tool for computing fees, called the Mutual Fund Expense Analyzer, on its website (http://apps.nasd.com/investor_Information/ea/nasd/mfetf.aspx). You put in the name of the fund, the amount invested, the rate of return, and the length of time you’ve had the fund, and it tells you exactly how much you’ve been charged.&lt;/p&gt;
&lt;p&gt;You can also compare past fees for different funds before you invest. For example, if you had put $100,000 into Putnam’s Small Cap Growth Fund Class B Shares and held it for the past five years, you would find that Putnam would have charged you $13,809 in fees during that time. Vanguard’s Total Stock Market Index Fund, on the other hand, would have charged only $1,165 for the exact same investment. —Byron Perry&lt;/p&gt;
&lt;p&gt;Which index fund?&lt;/p&gt;
&lt;p&gt;In some ways indexing is a no-brainer: invest your money and let it do its thing. Still, there are varieties. Aperio Group’s Patrick Geddes pushes two rules in choosing a fund: “The broader the better, and the cheaper the better.” When you invest in a broad domestic fund, you’re investing in the entire U.S. economy, or “owning capitalism,” as it were, Geddes says. [&lt;em&gt;]The Vanguard Total Stock Market Index Fund[&lt;/em&gt;]&lt;sup id="sf-the-best-investment-advice-youll-never-get-2-back"&gt;&lt;a href="#sf-the-best-investment-advice-youll-never-get-2" title="VTIL2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, which represents about 99.5 percent of U.S. common stocks, is a great one to start with. If you choose a narrower fund, like a tech or energy index, you’re basically just speculating (though you’ll most likely still fare better than if you tried to pick the next Google). Narrow index funds also typically command higher fees. With indexing gaining in popularity, everyone’s trying to get into the game and sneak in unnecessarily high fees. Geddes says there’s no good reason to pay more than .19 percent. —Byron Perry&lt;/p&gt;
&lt;p&gt;Mark Dowie, who managed the municipal bond portfolio at Bank of America and all nonequity investments for Industrial Indemnity, and advised the Bechtel family on economic and investment strategy, now watches his modest portfolio of index funds grow from his home near Point Reyes Station.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://en.wikipedia.org/wiki/William_F._Sharpe&lt;/li&gt;&lt;li&gt;https://www.google.ca/finance?q=vti&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-the-best-investment-advice-youll-never-get-1"&gt;&lt;a href="http://en.wikipedia.org/wiki/William_F._Sharpe"&gt;William Sharpe&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; &lt;a href="#sf-the-best-investment-advice-youll-never-get-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-the-best-investment-advice-youll-never-get-2"&gt;&lt;a href="https://www.google.ca/finance?q=vti"&gt;VTI&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; &lt;a href="#sf-the-best-investment-advice-youll-never-get-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="finance"></category><category term="etf"></category></entry><entry><title>Vocabulary</title><link href="http://web-pages.github.io/notes/vocabulary.html" rel="alternate"></link><updated>2015-04-03T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-03:notes/vocabulary.html</id><summary type="html">&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;4 Avril 2015&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bien - good&lt;/li&gt;
&lt;li&gt;Conocidos - familar&lt;/li&gt;
&lt;li&gt;Desconocidos - unfamilar&lt;/li&gt;
&lt;li&gt;Cena - dinner&lt;/li&gt;
&lt;li&gt;Comida - lunch&lt;/li&gt;
&lt;li&gt;Decimos - we say&lt;/li&gt;
&lt;li&gt;Desayuno - breakfast&lt;/li&gt;
&lt;li&gt;Dormir - sleep&lt;/li&gt;
&lt;li&gt;Fatal - bad&lt;/li&gt;
&lt;li&gt;Por - in&lt;/li&gt;
&lt;li&gt;Para - for&lt;/li&gt;
&lt;li&gt;Regular - okay&lt;/li&gt;
&lt;li&gt;Responder - response&lt;/li&gt;
&lt;li&gt;Saludar - greetings (salutation)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;4 Avril 2015&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Palabra - word&lt;/li&gt;
&lt;li&gt;Tarde (la) - afternoon&lt;/li&gt;
&lt;li&gt;Ayer - yesterday&lt;/li&gt;
&lt;li&gt;Hoy - today&lt;/li&gt;
&lt;li&gt;Mañana - tomorrow&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Days Of The Week&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Domingo - Sunday&lt;/li&gt;
&lt;li&gt;Lunes - Monday&lt;/li&gt;
&lt;li&gt;Martes - Tuesday&lt;/li&gt;
&lt;li&gt;Miercoles - Wednesday&lt;/li&gt;
&lt;li&gt;Jueves - Thursday&lt;/li&gt;
&lt;li&gt;Viernes - Friday&lt;/li&gt;
&lt;li&gt;Sabado - Saturday&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;30 Jan 2016&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Profesor - teacher&lt;/li&gt;
&lt;li&gt;Enfermero - nurse&lt;/li&gt;
&lt;li&gt;Comerero - waiter&lt;/li&gt;
&lt;li&gt;Dependiente - dependent&lt;/li&gt;
&lt;li&gt;Mecanico - mechanic&lt;/li&gt;
&lt;li&gt;Taller - workshop&lt;/li&gt;
&lt;li&gt;Escuela - school&lt;/li&gt;
&lt;li&gt;Aficiones - hobbies&lt;/li&gt;
&lt;li&gt;Bandera - flag&lt;/li&gt;
&lt;li&gt;Tarea - homework&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="vocabulary"></category></entry><entry><title>Environment Variables</title><link href="http://web-pages.github.io/notes/environment-variables.html" rel="alternate"></link><updated>2015-04-02T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-04-02:notes/environment-variables.html</id><summary type="html">&lt;h1 id="environment-variables"&gt;Environment Variables&lt;a href="#environment-variables" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Environment variables are a set of dynamic named values that can affect the way running processes will behave on a computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printenv&lt;/code&gt;&lt;br&gt;Lists environment variables in the current shell process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export ABC=XYZ&lt;/code&gt;&lt;br&gt;Creates environment variables ABC and sets it to XYZ. Using export means the variable will be available to all child processes&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="common-environment-variables"&gt;Common Environment Variables&lt;a href="#common-environment-variables" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHELL&lt;/code&gt;: This describes the shell that will be interpreting any commands you type in. In most cases, this will be bash by default, but other values can be set if you prefer other options.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TERM&lt;/code&gt;: This specifies the type of terminal to emulate when running the shell. Different hardware terminals can be emulated for different operating requirements&lt;sup id="sf-environment-variables-1-back"&gt;&lt;a href="#sf-environment-variables-1" title="See https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.htmlL1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER&lt;/code&gt;: The current logged in user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PWD&lt;/code&gt;: The current working directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OLDPWD&lt;/code&gt;: The previous working directory. This is kept by the shell in order to switch back to your previous directory by running cd -.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LS_COLORS&lt;/code&gt;: This defines color codes that are used to optionally add colored output to the ls command. This is used to distinguish different file types and provide more info to the user at a glance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAIL&lt;/code&gt;: The path to the current user's mailbox.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt;: A list of directories that the system will check when looking for commands. When a user types in a command, the system will check directories in this order for the executable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LANG&lt;/code&gt;: The current language and localization settings, including character encoding.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HOME&lt;/code&gt;: The current user's home directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;: The most recent previously executed command.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Environment_variable"&gt;Wikipedia Entry For Environment Variables&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.html&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Environment_variable&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-environment-variables-1"&gt;See &lt;a href="https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.html"&gt;https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.html&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; &lt;a href="#sf-environment-variables-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="linux"></category><category term="sysadmin"></category></entry><entry><title>React</title><link href="http://web-pages.github.io/notes/react.html" rel="alternate"></link><updated>2015-03-31T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-31:notes/react.html</id><summary type="html">&lt;h1 id="reactjs"&gt;Reactjs&lt;a href="#reactjs" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enaqx/awesome-react"&gt;Tutorials&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/"&gt;A Comprehensive Guide To Building Apps With React&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual DOM:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://calendar.perfplanet.com/2013/diff/"&gt;React's Virtual DOM Diff Algorithm&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-DX3vJiqxm4"&gt;The Secret Of React's Virtual DOM&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://github.com/enaqx/awesome-react&lt;/li&gt;&lt;li&gt;http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/&lt;/li&gt;&lt;li&gt;http://calendar.perfplanet.com/2013/diff/&lt;/li&gt;&lt;li&gt;https://www.youtube.com/watch?v=-DX3vJiqxm4&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="react"></category><category term="javascript"></category></entry><entry><title>Primal Blueprint</title><link href="http://web-pages.github.io/notes/primal-blueprint.html" rel="alternate"></link><updated>2015-03-18T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-18:notes/primal-blueprint.html</id><summary type="html">&lt;h1 id="ten-primal-blueprint-laws"&gt;Ten Primal Blueprint Laws&lt;a href="#ten-primal-blueprint-laws" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;10 Primal blueprint laws&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eat Lots Of Plants And Animals&lt;/li&gt;
&lt;li&gt;Avoid Poisonous Things&lt;/li&gt;
&lt;li&gt;Move Frequently At A Slow Pace&lt;/li&gt;
&lt;li&gt;Lift Heavy Things&lt;/li&gt;
&lt;li&gt;Sprint Once In A While&lt;/li&gt;
&lt;li&gt;Get Adaquate Sleep&lt;/li&gt;
&lt;li&gt;Play&lt;/li&gt;
&lt;li&gt;Get Adaquate Sunlight&lt;/li&gt;
&lt;li&gt;Avoid Stupid Mistakes&lt;/li&gt;
&lt;li&gt;Use Your Brain&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="some-important-links"&gt;Some Important Links&lt;a href="#some-important-links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/"&gt;Mark's Daily Apple&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="the-primal-blueprint-eating-philosphy"&gt;The primal blueprint eating philosphy&lt;a href="#the-primal-blueprint-eating-philosphy" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="insulin"&gt;Insulin&lt;a href="#insulin" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Insulin is vital for survival. Cell receptors use insulin as a key to unlock pores with the membrane of each cell. It's an elegant way to eliminate &lt;span class="pelican-inline"&gt;excess glucose from the bloodstream (which is highly toxic)&lt;/span&gt; which is then stored as &lt;a href="http://en.wikipedia.org/wiki/Glycogen"&gt;glycogen&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; (glycogen is used as fuel) for a later date.&lt;/p&gt;
&lt;h3 id="excess-insulin-is-bad"&gt;Excess Insulin Is Bad&lt;a href="#excess-insulin-is-bad" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Muscles and liver are not able to store high amounts of glycogen.&lt;/li&gt;
&lt;li&gt;Excess glucose not used in "real-time" (i.e. during exercise) get converted into &lt;span class="pelican-inline"&gt;triglycerides&lt;/span&gt; and stored in fat cells.&lt;/li&gt;
&lt;li&gt;High blood insulin level &lt;span class="math"&gt;\(\implies\)&lt;/span&gt; the fat cells that store excess glucose also stores the fat of of your most recent meal.&lt;/li&gt;
&lt;li&gt;Excess insulin is pro-inflammatory.&lt;/li&gt;
&lt;li&gt;High insulin levels leads to insulin resistance:&lt;ul&gt;
&lt;li&gt;Cell receptors become &lt;em&gt;desensitized&lt;/em&gt; to insulin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moderate insulin levels leads to insulin sensitivity:&lt;ul&gt;
&lt;li&gt;Liver and muscles are more effective at absorbing nutrients transported by insulin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="excess-insulin-and-heart-disease"&gt;Excess Insulin And Heart Disease&lt;a href="#excess-insulin-and-heart-disease" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Insulin promotes platelet adhesiveness (sticky platelets clot more easily).&lt;/li&gt;
&lt;li&gt;Insulin promotes the conversion of &lt;span class="pelican-inline"&gt;macrophages&lt;/span&gt; (a type of white blood cell) into foam cells. These are the cells that fill with cholesterol and accumulate in arterial walls.&lt;/li&gt;
&lt;li&gt;Insulin reduces blood levels of nitric oxide (a compound that relaxes the arterial wall lining) causing arteries to become more rigid. This increases blood pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="insulin-resistant-consequences"&gt;Insulin Resistant Consequences&lt;a href="#insulin-resistant-consequences" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;More glucose stays in blood. This is bad, glucose is toxic.&lt;/li&gt;
&lt;li&gt;More insulin is produced as a result of the elevated levels of glucose in the blood.&lt;/li&gt;
&lt;li&gt;Fat cells can't release their stored energy into the bloodstream since insulin keeps the "fat locked inside"&lt;/li&gt;
&lt;li&gt;Fat cells get bigger (i.e. you gain weight).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="excercise-and-diet"&gt;Excercise And Diet&lt;a href="#excercise-and-diet" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Excercise creates insulin sensitivity:&lt;ul&gt;
&lt;li&gt;Exercise empties muscles and liver of glyocgen.&lt;/li&gt;
&lt;li&gt;Insulin will then transport nutrients to liver and muscles instead of going to fat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cholesterol"&gt;Cholesterol&lt;a href="#cholesterol" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Convential wisdom says you must lower your cholesterol intake. This is not true: The &lt;a href="http://en.wikipedia.org/wiki/Framingham_Heart_Study"&gt;Framingham Heart Study&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt; totally refutes this. Study director Dr William Catelli&lt;sup id="sf-primal-blueprint-1-back"&gt;&lt;a href="#sf-primal-blueprint-1" title="Excellent article: Framingham Flip FlopL4" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; summarized the issue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serum cholesterol is not a strong risk factor for heart disease&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Study's highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;There is no correlation between dietary cholesterol and blood cholesterol levels&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Framingham residents who ate the most cholesterol, saturated fats and total calories weighed the least and were the most physically active.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lipoproteins"&gt;Lipoproteins&lt;a href="#lipoproteins" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Cholesterol is fat-soluble&lt;/span&gt; (i.e. it does not disolve in water), so in order to travel in the "water blood environment", it carried by special particles called &lt;a href="http://en.wikipedia.org/wiki/Lipoprotein"&gt;lipoproteins&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;3 Important Lipoproteins&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;VLDL&lt;/strong&gt; - Very low density lipoproteins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LDL&lt;/strong&gt; - Low density lipoproteins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HDL&lt;/strong&gt; - High density lipoproteins &lt;strong&gt;&amp;lt;= good cholesterol&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h4 id="vldl"&gt;VLDL&lt;a href="#vldl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VLDL are manufactured in the liver in the presence of high levels of triglycerides.&lt;ul&gt;
&lt;li&gt;Therefore they comprise 80% triglycerides and very little cholesterol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Once triglycerides have been deposited, their size decreases and they convert into on of two types of LDL carrying mostly cholesterol&lt;/span&gt;:&lt;ol&gt;
&lt;li&gt;Large fluffy LDLs&lt;/li&gt;
&lt;li&gt;Small dense LSLs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ldl"&gt;LDL&lt;a href="#ldl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Large fluffly "boyant" LDL are generally harmless (even at high levels).&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Small dense LDL are extremely dangerous and cause heart disease&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Small dense LDLs result when there are excessive triglycerides in the blood,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small dense LDL result from high levels of carbs:
&lt;/p&gt;
&lt;div class="math"&gt;$$
\text{Carbs }\rightarrow\text{ Insulin }\rightarrow\text{ Triglycerides }\rightarrow\text{ VDL }\rightarrow\text{ Small Dense LDLs}
$$&lt;/div&gt;
&lt;h4 id="hdl"&gt;HDL&lt;a href="#hdl" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;Good cholesterol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Cleans up any damages or oxidized cholesterol&lt;/li&gt;
&lt;li&gt;Removes small dense LDLs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Increase HDL by exercising and consuming saturated fat&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id="oxidation"&gt;Oxidation&lt;a href="#oxidation" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lipoproteins, if oxidized become damaged and are dangerous. Oxidation can happen for multiple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High intake of unstable polyunsaturated fats (PUFAs) from vegetable oils.&lt;/li&gt;
&lt;li&gt;Reduction of natural antioxidants.&lt;/li&gt;
&lt;li&gt;Low level of HDL.&lt;/li&gt;
&lt;li&gt;Small dense LDLs do not bind as easily to the LDL receptors on muscles and fat cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;&lt;a href="http://en.wikipedia.org/wiki/Atherosclerosis"&gt;Atherosclerosis&lt;/a&gt;&lt;sup class="print"&gt;L6&lt;/sup&gt; occurs in the arteries and not the veins because venous blood has little oxygen&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Oxidation and inflammation &lt;span class="pelican-inline"&gt;has little to do with total cholesterol (or even total LDL cholesterol) and is instead the result of the oxidation of a small fraction of the total amount of LDL - the small dense LDL particles&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id="blood-tests"&gt;Blood Tests&lt;a href="#blood-tests" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Most common blood tests do not distinguish between the benign "fluffy" LDL (sometimes called pattern A) and the small dense particles (sometimes called pattern B).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here are some good articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/how-to-interpret-cholesterol-test-results/#axzz3ZB2yhrJh"&gt;How to interpret cholesterol tests&lt;/a&gt;&lt;sup class="print"&gt;L7&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/how-to-interpret-advanced-cholesterol-test-results/#axzz3ZB8x2c4p"&gt;How to interpret advanced cholesterol tests&lt;/a&gt;&lt;sup class="print"&gt;L8&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The straight dope on cholesterol: 10 things you need to know&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-1/#axzz3ZB8x2c4p"&gt;part 1&lt;/a&gt;&lt;sup class="print"&gt;L9&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-2/#axzz3ZB8x2c4p"&gt;part 2&lt;/a&gt;&lt;sup class="print"&gt;L10&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;What to measure in a blood test&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;C-Reactive Protein&lt;/strong&gt; (Hs-CRP) - produced as an immune system response. High levels associated with increased risk of heart attack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lp2A&lt;/strong&gt; - Key inflammation marker associated with small dense LDL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A1c&lt;/strong&gt; (Estimated average glucose) - Measures how much glucose is attached to hemoglobin molecule. Much better than common blood glucose reading.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fasting Blood Insulin Levels&lt;/strong&gt; - High fasting insulin levels are indicitive of prediabetic conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id="macro-nutrients"&gt;Macro Nutrients&lt;a href="#macro-nutrients" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are three major macro nutrients:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protein&lt;/li&gt;
&lt;li&gt;Carbohydrate&lt;/li&gt;
&lt;li&gt;Fat&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="protein"&gt;Protein&lt;a href="#protein" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Optimal protein intake is 0.5 to 1.0 gram of protein per pound of lean body mass per day&lt;/span&gt;:&lt;/p&gt;
&lt;div class="admonition border-box"&gt;
&lt;p class="admonition-title"&gt;Calculate Lean Body Mass&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, determine total weight and percentage of body fat.&lt;/li&gt;
&lt;li&gt;Multiply total weight by percentage of body fat to get your &lt;em&gt;fat&lt;/em&gt; weight.&lt;/li&gt;
&lt;li&gt;Subtract &lt;em&gt;fat&lt;/em&gt; weight from total body weight to get &lt;em&gt;lean body mass&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;Eating protein:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If exercising and a &lt;em&gt;no&lt;/em&gt; low carb diet&lt;sup id="sf-primal-blueprint-2-back"&gt;&lt;a href="#sf-primal-blueprint-2" title="For example, the Atkins DietL11." class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, protein will go towards repair or building cell walls.&lt;/li&gt;
&lt;li&gt;If there is not much &lt;em&gt;insulin&lt;/em&gt; in the blood, the protein cannot easily be stored as fat and so &lt;span class="pelican-inline"&gt;the body is forced to raise the metabolic rate and increasing ketone production&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="carbohydrates"&gt;Carbohydrates&lt;a href="#carbohydrates" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Carbohydrates control insulin; insulin controls fat storage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only used for fuel.&lt;/li&gt;
&lt;li&gt;All forms of carbs are eventually converted to glucose:&lt;/li&gt;
&lt;li&gt;&lt;span class="pelican-inline"&gt;A limited amount of glucose&lt;/span&gt; will be stored as glycogen in muscles in liver.&lt;/li&gt;
&lt;li&gt;Most glucose gets converted to fatty acids and stored in fat cells.&lt;/li&gt;
&lt;li&gt;It's the job of insulin to take glucose out of the blood stream (glucose is toxic).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Unless one depletes lots of glycogen every day, there is no reason to consume high levels of carbs&lt;/span&gt;:
 * Carbs are not essential in our diets (proteins and fats are essential).&lt;/p&gt;
&lt;h4 id="daily-carb-intake"&gt;Daily Carb Intake&lt;a href="#daily-carb-intake" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img style="max-width: 60%" src="images/carb-curve.jpg" alt="Carbohydrate Curve"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0-50 grams&lt;/strong&gt;: Ketosis and accelerated fat burning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;50-100 grams&lt;/strong&gt;: Primal sweetspot = effortless weight loss.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;100-150 grams&lt;/strong&gt;: Primal blueprint maintenance range.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;150-300 grams&lt;/strong&gt;: Steady insiduous weight gain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;300 grams and more&lt;/strong&gt;: Danger zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fat"&gt;Fat&lt;a href="#fat" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="pelican-inline"&gt;Consuming ample &lt;em&gt;healthy&lt;/em&gt; fats is good]&lt;/span&gt; (this goes against conventional wisdom):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingesting fats makes you feel full (unlike carbs).&lt;/li&gt;
&lt;li&gt;Fats have little or no impact on glucose levels (and therefore insulin)&lt;ul&gt;
&lt;li&gt;Fats takes far longer than carbs to metabolize =&amp;gt; deeper longer lasting satisfaction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://en.wikipedia.org/wiki/Nurses%27_Health_Study"&gt;nurses health study&lt;/a&gt;&lt;sup class="print"&gt;L12&lt;/sup&gt; concluded that total fat intake is not statistically correlated to heart disease.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="good-fats"&gt;Good Fats&lt;a href="#good-fats" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=""&gt;Saturated&lt;/a&gt; and &lt;a href=""&gt;Omega 3&lt;/a&gt; fats are healthy fats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Omega-3_fatty_acid"&gt;Omega 3&lt;/a&gt;&lt;sup class="print"&gt;L13&lt;/sup&gt; - found in fishy oils. The optimum ratio between Omega-6:Omega-3 is out of balance&lt;ul&gt;
&lt;li&gt;Decrease Omega-6, increase Omega-3. The ratio should ideally be 2:1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Saturated_fat"&gt;Saturated Fats&lt;/a&gt;&lt;sup class="print"&gt;L14&lt;/sup&gt; - found in red meat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bad-fats"&gt;Bad Fats&lt;a href="#bad-fats" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Omega-6_fatty_acid"&gt;Omega 6&lt;/a&gt;&lt;sup class="print"&gt;L15&lt;/sup&gt; - fats in processed foods (omega 6 is needed to live, but ratio between omega 3 is scewed in modern diets).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Trans_fat"&gt;Partially hydrogenated and trans fats&lt;/a&gt;&lt;sup class="print"&gt;L16&lt;/sup&gt; - made by heating and chemically treating vegetable/seed oils to become solid. &lt;span class="pelican-inline"&gt;These fats are evil - avoid at all costs&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="carbs-make-fats-look-bad"&gt;Carbs Make Fats Look Bad&lt;a href="#carbs-make-fats-look-bad" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Fats are calorically dense. &lt;span class="pelican-inline"&gt;If eaten with carbs, the insulin from the carbs will result in making one fat.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="ketones-the-fourth-fuel"&gt;Ketones - The Fourth Fuel&lt;a href="#ketones-the-fourth-fuel" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ketones&lt;sup id="sf-primal-blueprint-3-back"&gt;&lt;a href="#sf-primal-blueprint-3" title="They are actually called Ketone BodiesL17" class="simple-footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;span class="pelican-inline"&gt;are a by product of the fatty acid fuel used by the liver to extract glucose from proteins. It is an energy rich form of fuel that is both safe and desirable to use.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ketones can't be stored like fat or glycogen - they just circulate the blood stream where they can be used by any cell.&lt;/li&gt;
&lt;li&gt;Ketosis is the scientific name for when ketones accumulate in the body and can be used for energy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="law-1-eat-lots-of-plants-and-animals"&gt;Law 1 - Eat Lots Of Plants And Animals&lt;a href="#law-1-eat-lots-of-plants-and-animals" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="law-2-avoid-poisonous-things"&gt;Law 2 - Avoid Poisonous Things&lt;a href="#law-2-avoid-poisonous-things" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="primal-blueprint-exercise-laws"&gt;Primal Blueprint Exercise Laws&lt;a href="#primal-blueprint-exercise-laws" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="primal-blueprint-lifestyle-laws"&gt;Primal Blueprint Lifestyle Laws&lt;a href="#primal-blueprint-lifestyle-laws" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="primal-approach-to-weight-loss"&gt;Primal Approach To Weight Loss&lt;a href="#primal-approach-to-weight-loss" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a href="#conclusion" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.marksdailyapple.com/&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Glycogen&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Framingham_Heart_Study&lt;/li&gt;&lt;li&gt;http://www.proteinpower.com/drmike/cardiovascular-disease/framingham-flip-flop/&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Lipoprotein&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Atherosclerosis&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/how-to-interpret-cholesterol-test-results/#axzz3ZB2yhrJh&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/how-to-interpret-advanced-cholesterol-test-results/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-1/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://www.marksdailyapple.com/the-straight-dope-on-cholesterol-10-things-you-need-to-know-part-2/#axzz3ZB8x2c4p&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Atkins_diet&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Nurses%27_Health_Study&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Omega-3_fatty_acid&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Saturated_fat&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Omega-6_fatty_acid&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Trans_fat&lt;/li&gt;&lt;li&gt;http://en.wikipedia.org/wiki/Ketone_bodies#Impact_upon_pH&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-primal-blueprint-1"&gt;Excellent article: &lt;a href="http://www.proteinpower.com/drmike/cardiovascular-disease/framingham-flip-flop/"&gt;Framingham Flip Flop&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt; &lt;a href="#sf-primal-blueprint-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-primal-blueprint-2"&gt;For example, the &lt;a href="http://en.wikipedia.org/wiki/Atkins_diet"&gt;Atkins Diet&lt;/a&gt;&lt;sup class="print"&gt;L11&lt;/sup&gt;. &lt;a href="#sf-primal-blueprint-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-primal-blueprint-3"&gt;They are actually called &lt;a href="http://en.wikipedia.org/wiki/Ketone_bodies#Impact_upon_pH"&gt;Ketone Bodies&lt;/a&gt;&lt;sup class="print"&gt;L17&lt;/sup&gt; &lt;a href="#sf-primal-blueprint-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="book summary"></category><category term="diet"></category><category term="health"></category><category term="primal"></category></entry><entry><title>Git</title><link href="http://web-pages.github.io/notes/git.html" rel="alternate"></link><updated>2015-03-16T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-16:notes/git.html</id><summary type="html">&lt;h1 id="git"&gt;Git&lt;a href="#git" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/book/en/v2"&gt;Git Book&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt; - The official Git book&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/blog"&gt;Git Reset Demystified&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt; - An incredibly illuminating article. Must Read for a better understanding&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pcottle.github.io/learnGitBranching/"&gt;Interactive Tutorial For Learning Branching&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="config"&gt;Config&lt;a href="#config" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config push.default current&lt;/code&gt; - push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows. This will create a remote branch if it does not already exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config remote.pushdefault current&lt;/code&gt; - will push the branch to the origin remote by default (if not specified) and create if its not present&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="git-commands"&gt;Git Commands&lt;a href="#git-commands" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="fixup-and-autosquash"&gt;Fixup and Autosquash&lt;a href="#fixup-and-autosquash" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Squash last commit with a combination of &lt;code&gt;fixup&lt;/code&gt; and &lt;code&gt;autosquash&lt;/code&gt;&lt;sup id="sf-git-1-back"&gt;&lt;a href="#sf-git-1" title="SourceL4" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id="fixup"&gt;Fixup&lt;a href="#fixup" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add featureA
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;"Feature A is done"&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;dev fb2f677&lt;span class="o"&gt;]&lt;/span&gt; Feature A is &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add featureB
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;"Feature B is done"&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;dev 733e2ff&lt;span class="o"&gt;]&lt;/span&gt; Feature B is &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;If something is added to featureA, use &lt;code&gt;fixup&lt;/code&gt; with featureA's commit hash to have commit message copied:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add featureA
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit --fixup fb2f677
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Git has now automatically created a commit message with the word &lt;em&gt;fixup!&lt;/em&gt; appended to featureA's original commit message.&lt;/p&gt;
&lt;h3 id="autosquash"&gt;Autosquash&lt;a href="#autosquash" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Autosquash can now take place (the fixup step above is essential). Pick a hash to rebase, and do the following:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase -i --autosquash ac5db87
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The rebase editor has been opened - just save and quit.&lt;/p&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://git-scm.com/book/en/v2&lt;/li&gt;&lt;li&gt;http://git-scm.com/blog&lt;/li&gt;&lt;li&gt;http://pcottle.github.io/learnGitBranching/&lt;/li&gt;&lt;li&gt;http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-git-1"&gt;&lt;a href="http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html"&gt;Source&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt; &lt;a href="#sf-git-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="git"></category><category term="devops"></category></entry><entry><title>Is A Binary Tree A Binary Search Tree</title><link href="http://web-pages.github.io/notes/is-a-binary-tree-a-binary-search-tree.html" rel="alternate"></link><updated>2015-03-14T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-14:notes/is-a-binary-tree-a-binary-search-tree.html</id><summary type="html">
&lt;p&gt;Given a binary tree, how can one determine if it is a binary search tree?&lt;/p&gt;
&lt;h1 id="solutions"&gt;Solutions&lt;a class="headerlink" href="#solutions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The tree will consist of a root node, each node having two pointers to it's left and right children:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;There are two solutions, both having identical run and space complexity.&lt;/p&gt;
&lt;h2 id="recursion-in-order-traversal"&gt;Recursion: In-order Traversal&lt;a class="headerlink" href="#recursion-in-order-traversal" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a binary tree is a binary search tree, then in an in-order traversal, the value of the current node will always be greater than or equal to the value of the previous node.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Note: declaring a pointer for the reference variable prev is a C++ construct (i.e. not available in C).&lt;/p&gt;
&lt;h2 id="greedy-decision-for-each-node"&gt;Greedy: Decision For Each Node&lt;a class="headerlink" href="#greedy-decision-for-each-node" title="Permanent link"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A greedy decision can be made for each node, but a global min and global max value needs to also be compared. This is because a binary tree could be locally valid but not globally (as in this example):&lt;/p&gt;
&lt;p&gt;&lt;img alt="BST Violation" src="images/BST-Violation.png"/&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="n"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;isBST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LONG_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LONG_MAX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h1 id="follow-up-questions"&gt;Follow Up Questions&lt;a class="headerlink" href="#follow-up-questions" title="Permanent link"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Q: What is the time complexity to access an element?&lt;br&gt;&lt;em&gt;A: &lt;span class="math"&gt;\(O(n)\)&lt;/span&gt;&lt;/em&gt;&lt;br&gt;[Don't confuse BST with balanced BST and incorrectly say &lt;span class="math"&gt;\(O(\log\cdot n)\)&lt;/span&gt;] &lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="binary search tree"></category><category term="binary tree"></category><category term="tree"></category><category term="graph"></category><category term="algorithms"></category></entry><entry><title>Docker</title><link href="http://web-pages.github.io/notes/docker.html" rel="alternate"></link><updated>2015-03-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-12:notes/docker.html</id><summary type="html">&lt;h1 id="docker-containers"&gt;Docker Containers&lt;a href="#docker-containers" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker Website&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/introduction/understanding-docker/#inside-docker"&gt;Understanding Docker&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/"&gt;Docker Documentation&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LNAzzHS1Rho"&gt;The Revolution Will Be Containerized&lt;/a&gt;&lt;sup class="print"&gt;L4&lt;/sup&gt; Introductory Screencast&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.centurylinklabs.com/optimizing-docker-images/"&gt;Optimizing Docker Images&lt;/a&gt;&lt;sup class="print"&gt;L5&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="knowledge"&gt;Knowledge&lt;a href="#knowledge" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/"&gt;Docker and the PID 1 zombie reaping problem&lt;/a&gt;&lt;sup class="print"&gt;L6&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Why one should not use Phusion:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/docker-dev/GkTgRh6j7eY"&gt;Discussion 1&lt;/a&gt;&lt;sup class="print"&gt;L7&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/radial/docs/issues/1#issuecomment-45405751"&gt;Discussion 2&lt;/a&gt;&lt;sup class="print"&gt;L8&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/radial/docs/issues/1#issuecomment-45405751"&gt;Using Supervisor With Docker&lt;/a&gt;&lt;sup class="print"&gt;L8&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces"&gt;Tutorial For Isolation With Linux Namespaces&lt;/a&gt;&lt;sup class="print"&gt;L9&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="useful-docker-commands"&gt;Useful Docker Commands&lt;a href="#useful-docker-commands" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="containers"&gt;Containers&lt;a href="#containers" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interactive container:&lt;br&gt;&lt;code&gt;sudo docker run -t -i &amp;lt;container&amp;gt; /bin/bash&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="images"&gt;Images&lt;a href="#images" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;List docker images on local host:&lt;br&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;List docker images in a tree:&lt;br&gt;&lt;code&gt;docker images --tree&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Download an image to local host:&lt;br&gt;&lt;code&gt;docker pull &amp;lt;image-name&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Search for images on docker hub:&lt;br&gt;&lt;code&gt;docker search &amp;lt;search term&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dockerfile"&gt;Dockerfile&lt;a href="#dockerfile" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Build an image with Dockerfile:&lt;br&gt;&lt;code&gt;sudo docker build &amp;lt;path of Dockerfile&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://www.docker.com/&lt;/li&gt;&lt;li&gt;https://docs.docker.com/introduction/understanding-docker/#inside-docker&lt;/li&gt;&lt;li&gt;https://docs.docker.com/&lt;/li&gt;&lt;li&gt;https://www.youtube.com/watch?v=LNAzzHS1Rho&lt;/li&gt;&lt;li&gt;http://www.centurylinklabs.com/optimizing-docker-images/&lt;/li&gt;&lt;li&gt;https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&lt;/li&gt;&lt;li&gt;https://groups.google.com/forum/#!topic/docker-dev/GkTgRh6j7eY&lt;/li&gt;&lt;li&gt;https://github.com/radial/docs/issues/1#issuecomment-45405751&lt;/li&gt;&lt;li&gt;http://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="docker"></category><category term="containers"></category><category term="rcdevops"></category></entry><entry><title>Nginx</title><link href="http://web-pages.github.io/notes/nginx.html" rel="alternate"></link><updated>2015-03-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-12:notes/nginx.html</id><summary type="html">&lt;h1 id="links"&gt;Links&lt;a href="#links" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.aosabook.org/en/nginx.html"&gt;Nginx Architecture&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.aosabook.org/en/nginx.html&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="nginx"></category><category term="devops"></category></entry><entry><title>Node/IO</title><link href="http://web-pages.github.io/notes/nodeio.html" rel="alternate"></link><updated>2015-03-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-12:notes/nodeio.html</id><summary type="html">&lt;h1 id="nodeio"&gt;Node/IO&lt;a href="#nodeio" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="language-features"&gt;Language Features&lt;a href="#language-features" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;module.exports vs exports&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hacksparrow.com/node-js-exports-vs-module-exports.html"&gt;module.exports vs exports&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;ul&gt;
&lt;li&gt;From what I understand: Use &lt;code&gt;module.exports&lt;/code&gt; for exporting specific object types. The module then &lt;em&gt;becomes&lt;/em&gt; that object. Use &lt;code&gt;exports&lt;/code&gt; for exporting a module instance with properties attached&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/docs/latest/api/modules.html#modules_module_exports"&gt;nodes documentation&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://www.hacksparrow.com/node-js-exports-vs-module-exports.html&lt;/li&gt;&lt;li&gt;https://nodejs.org/docs/latest/api/modules.html#modules_module_exports&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="nodejs"></category><category term="iojs"></category><category term="javascript"></category></entry><entry><title>The Median Element Of Two Sorted Arrays</title><link href="http://web-pages.github.io/notes/the-median-element-of-two-sorted-arrays.html" rel="alternate"></link><updated>2015-03-09T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-09:notes/the-median-element-of-two-sorted-arrays.html</id><summary type="html">&lt;p&gt;This is a &lt;a href="https://leetcode.com/problems/median-of-two-sorted-arrays/"&gt;LeetCode problem&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;a href="#problem-statement" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are 2 sorted arrays A and B of size m and n respectively. Write an algorithm to find the median of the array obtained after merging the above 2 arrays.&lt;/p&gt;
&lt;h3 id="clarifying-questions"&gt;Clarifying questions&lt;a href="#clarifying-questions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Q: How is the median calculated when there are an even amount of elements?&lt;br&gt; &lt;em&gt;A: It is the average of the two middle elements&lt;/em&gt;.&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="background-knowledge"&gt;Background Knowledge&lt;a href="#background-knowledge" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id="the-median"&gt;The Median&lt;a href="#the-median" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In probability theory and statistics, a median is described as the number separating the higher half of a sample, a population, or a probability distribution, from the lower half. The median of a finite list of numbers can be found by arranging all the numbers from lowest value to highest value and picking the middle one.&lt;/p&gt;
&lt;p&gt;For getting the median of input array &lt;span class="math"&gt;\(\{12, 11, 15, 10, 20\}\)&lt;/span&gt;, first sort the array. The sorted input array is &lt;span class="math"&gt;\(\{10, 11, 12, 15, 20\}\)&lt;/span&gt;. The Median is the middle element of the sorted array which is &lt;span class="math"&gt;\(12\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There are different conventions to take median of an array with even number of elements, one can take the mean of the two middle values, or first middle value, or second middle value.&lt;/p&gt;
&lt;h1 id="solututions"&gt;Solututions&lt;a href="#solututions" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The following definitions apply to all the solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(M\)&lt;/span&gt;: The &lt;em&gt;median&lt;/em&gt;, &lt;span class="math"&gt;\(M := \dfrac{m+n-1}{2}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="merge-arrays-and-iterate"&gt;Merge Arrays And Iterate&lt;a href="#merge-arrays-and-iterate" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(m+n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(m+n)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is to merge the two sorted arrays into one array, and then iterate until the median element is found. This is very simple to impement, but very inneficient&lt;/p&gt;
&lt;h2 id="use-merge-routine-from-merge-sort"&gt;Use Merge Routine From &lt;a href="http://doctrina.org/Merge-Sort-And-Inversions.html"&gt;Merge Sort&lt;/a&gt;&lt;sup class="print"&gt;L2&lt;/sup&gt;&lt;a href="#use-merge-routine-from-merge-sort" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(m+n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Space efficiency is improved with this method.&lt;/p&gt;
&lt;h3 id="code"&gt;Code&lt;a href="#code" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;mergeIterate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Ai&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ai&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Ai&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Bi&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Ai&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;Ai&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ai&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Bi&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Ai&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Bi&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;Bi&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mergeIterate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;result&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mergeIterate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="binary-search-optimal-solution"&gt;Binary Search (Optimal Solution)&lt;a href="#binary-search-optimal-solution" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time: &lt;span class="math"&gt;\(O(\log\cdot m + \log\cdot n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Space: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The optimal solution uses &lt;a href="binary-search.html"&gt;binary search&lt;/a&gt;&lt;sup class="print"&gt;L3&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id="explanation"&gt;Explanation&lt;a href="#explanation" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An index &lt;span class="math"&gt;\(i\)&lt;/span&gt; in array &lt;span class="math"&gt;\(A\)&lt;/span&gt; can be tested to determine if it is the median in the merged array in &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt; time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If index &lt;span class="math"&gt;\(i\)&lt;/span&gt; in &lt;span class="math"&gt;\(A\)&lt;/span&gt; is selected, then it can only be the median element in the entire array if &lt;span class="math"&gt;\(A[i]\)&lt;/span&gt; is in the &lt;span class="math"&gt;\(M\)&lt;/span&gt;'th position in the entire merged array.&lt;/li&gt;
&lt;li&gt;By definition, &lt;span class="math"&gt;\(A[i]\)&lt;/span&gt; is greater than or equal to &lt;span class="math"&gt;\(i\)&lt;/span&gt; elements in &lt;span class="math"&gt;\(A\)&lt;/span&gt;. It must also be greater than or equal to &lt;span class="math"&gt;\(M-i-1\)&lt;/span&gt; elements in &lt;span class="math"&gt;\(B\)&lt;/span&gt;&lt;sup id="sf-the-median-element-of-two-sorted-arrays-1-back"&gt;&lt;a href="#sf-the-median-element-of-two-sorted-arrays-1" title="If it is greater than \((M-i)\) elements, then \(A[i]\) is the \((M+1)\)'th element" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;span class="math"&gt;\(j = M-i-1\)&lt;/span&gt;, and test if &lt;span class="math"&gt;\(A[i] \geq B[j]\)&lt;/span&gt;. This is a &lt;a href=""&gt;predicate function&lt;/a&gt; that can be used in binary search.&lt;/li&gt;
&lt;li&gt;Find the first true result, and if &lt;span class="math"&gt;\(B[j] \leq A[i] \leq B[j+1]\)&lt;/span&gt;, it is the median of the entire merged array. If not, then the median element lies in array &lt;span class="math"&gt;\(B\)&lt;/span&gt; and so the whole procedure must be repeated for &lt;span class="math"&gt;\(B\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the code below, the predicate function is &lt;code&gt;medianTest&lt;/code&gt;. Here is a line-by-line explanation of it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;b1&lt;/code&gt; is the &lt;code&gt;j&lt;/code&gt;'th element in &lt;code&gt;B&lt;/code&gt; and if &lt;code&gt;j&lt;/code&gt; is in the bounds of &lt;code&gt;B&lt;/code&gt;, set it to &lt;code&gt;B[j]&lt;/code&gt;. The ternary operator will set it to &lt;code&gt;INT_MIN&lt;/code&gt; if not in bounds.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b2&lt;/code&gt; is the &lt;code&gt;j+1&lt;/code&gt;'th element in &lt;code&gt;B&lt;/code&gt;, and if in bounds, then it is set to &lt;code&gt;B[j+1]&lt;/code&gt;. The ternary operator will initialize it to &lt;code&gt;INT_MAX&lt;/code&gt; if not in bounds.&lt;/li&gt;
&lt;li&gt;The predicate tested for in line 4 only takes into account &lt;code&gt;b1&lt;/code&gt;. If &lt;code&gt;j&lt;/code&gt; is greater than the bounds of &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;b1&lt;/code&gt;'s initialized value must be changed to &lt;code&gt;INT_MAX&lt;/code&gt;. If on the other hand &lt;code&gt;j&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;, it can just stay at the initialized value of &lt;code&gt;INT_MIN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The predicate check. The aim of this binary search will be to find the first &lt;code&gt;A[i]&lt;/code&gt; that is greater than the corresponding &lt;code&gt;b1&lt;/code&gt;. If &lt;code&gt;j&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;, then this is automatically true (so set &lt;code&gt;b1&lt;/code&gt; to &lt;code&gt;INT_MIN&lt;/code&gt;). If &lt;code&gt;j&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;'s bounds, then this is automatically false (so set &lt;code&gt;b1&lt;/code&gt; to &lt;code&gt;INT_MAX&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="code_1"&gt;Code&lt;a href="#code_1" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;medianTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INT_MIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;findMedian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//base case&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;medianTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;medianTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;findMedian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;findMedian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;https://leetcode.com/problems/median-of-two-sorted-arrays/&lt;/li&gt;&lt;li&gt;http://doctrina.org/Merge-Sort-And-Inversions.html&lt;/li&gt;&lt;li&gt;binary-search.html&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-the-median-element-of-two-sorted-arrays-1"&gt;If it is greater than &lt;span class="math"&gt;\((M-i)\)&lt;/span&gt; elements, then &lt;span class="math"&gt;\(A[i]\)&lt;/span&gt; is the &lt;span class="math"&gt;\((M+1)\)&lt;/span&gt;'th element &lt;a href="#sf-the-median-element-of-two-sorted-arrays-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="coding puzzle"></category><category term="leetcode"></category><category term="binary search"></category></entry><entry><title>Binary Search</title><link href="http://web-pages.github.io/notes/binary-search.html" rel="alternate"></link><updated>2015-03-08T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2015-03-08:notes/binary-search.html</id><summary type="html">&lt;p&gt;This article is a summary of the &lt;a href="http://community.topcoder.com/tc?module=Static&amp;amp;d1=tutorials&amp;amp;d2=binarySearch"&gt;topcoder binary search tutorials&lt;/a&gt;&lt;sup class="print"&gt;L1&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="classic-binary-search"&gt;Classic Binary Search&lt;a href="#classic-binary-search" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="binary-search-at-a-glance"&gt;Binary Search at a glance:&lt;a href="#binary-search-at-a-glance" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Time Complexity&lt;/strong&gt;: &lt;span class="math"&gt;\(O(\log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space Complexity&lt;/strong&gt;: &lt;span class="math"&gt;\(O(1)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search Space&lt;/strong&gt;: a contiguous sub sequence where the sought value is located.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-condition&lt;/strong&gt;: the input sequence is sorted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At each step, the median value of the search space is compared:
 1. Since the input sequence is sorted, the search space can be halved
 2. By repetition, search space reduces to the sought value&lt;/p&gt;
&lt;h2 id="algorithm"&gt;Algorithm&lt;a href="#algorithm" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To find a value in a sorted sequence with random access:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bsearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//value not found&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id="discrete-binary-search"&gt;Discrete Binary Search&lt;a href="#discrete-binary-search" title="Permanent link" class="headerlink"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: '[math]'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;h2 class="print"&gt;Links&lt;/h2&gt;&lt;div style="margin-left: 2.0em;" class="print"&gt;&lt;ol class="print-links"&gt;&lt;li&gt;http://community.topcoder.com/tc?module=Static&amp;amp;d1=tutorials&amp;amp;d2=binarySearch&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><category term="binary search"></category><category term="algorithms"></category><category term="topcoder"></category></entry></feed>